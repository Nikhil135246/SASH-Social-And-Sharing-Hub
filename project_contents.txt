Project Structure:

SASH-app/
    .gitignore
    app.json
    eas.json
    expo-env.d.ts
    h origin main
    index.js
    jsconfig.json
    metro.config.js
    package.json
    postcard.txt
    app/
        index.tsx
        login.jsx
        signUp.jsx
        welcome.jsx
        _layout.jsx
        main/
            editProfile.jsx
            home.jsx
            newpost.jsx
            notifications.jsx
            postDetails.jsx
            profile.jsx
    components/
        Avatar.jsx
        BackButton.jsx
        Button.jsx
        CommentItem.jsx
        Header.jsx
        Input.jsx
        Loading.jsx
        LoadingAnimated.jsx
        NotificationItem.jsx
        PostCard.jsx
        RichTextEditor.jsx
        ScreenWrapper.jsx
        test.jsx
    constants/
        index.js
        theme.js
    context/
        AuthContext.js
    helpers/
        common.js
    lib/
        supabase.js
    services/
        imageService.js
        notificationService.js
        postService.js
        userService.js


Project Files Content:


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\.gitignore ---
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

app-example

# @generated expo-cli sync-8d4afeec25ea8a192358fae2f8e2fc766bdce4ec
# The following patterns were generated by expo-cli

# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local
/constants/index.js
# typescript
*.tsbuildinfo

# @end expo-cli

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\app.json ---
{
  "expo": {
    "name": "SASH-app",
    "slug": "SASH-app",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "package": "com.nik1214.SASHapp"
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-splash-screen",
        {
          "image": "./assets/images/splash-icon.png",
          "imageWidth": 200,
          "resizeMode": "contain",
          "backgroundColor": "#ffffff"
        }
      ],
      "expo-video"
    ],
    "experiments": {
      "typedRoutes": true
    },
    "extra": {
      "router": {
        "origin": false
      },
      "eas": {
        "projectId": "b83d8c79-417a-4058-b524-1d9fac0fc778"
      }
    }
  }
}


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\eas.json ---
{
  "cli": {
    "version": ">= 14.2.0",
    "appVersionSource": "remote"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal"
    },
    "production": {
      "autoIncrement": true
    }
  },
  "submit": {
    "production": {}
  }
}


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\expo-env.d.ts ---
/// <reference types="expo/types" />

// NOTE: This file should not be edited and should be in your git ignore

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\h origin main ---

                   SSUUMMMMAARRYY OOFF LLEESSSS CCOOMMMMAANNDDSS

      Commands marked with * may be preceded by a number, _N.
      Notes in parentheses indicate the behavior if _N is given.
      A key preceded by a caret indicates the Ctrl key; thus ^K is ctrl-K.

  h  H                 Display this help.
  q  :q  Q  :Q  ZZ     Exit.
 ---------------------------------------------------------------------------

                           MMOOVVIINNGG

  e  ^E  j  ^N  CR  *  Forward  one line   (or _N lines).
  y  ^Y  k  ^K  ^P  *  Backward one line   (or _N lines).
  f  ^F  ^V  SPACE  *  Forward  one window (or _N lines).
  b  ^B  ESC-v      *  Backward one window (or _N lines).
  z                 *  Forward  one window (and set window to _N).
  w                 *  Backward one window (and set window to _N).
  ESC-SPACE         *  Forward  one window, but don't stop at end-of-file.
  d  ^D             *  Forward  one half-window (and set half-window to _N).
  u  ^U             *  Backward one half-window (and set half-window to _N).
  ESC-)  RightArrow *  Right one half screen width (or _N positions).
  ESC-(  LeftArrow  *  Left  one half screen width (or _N positions).
  ESC-}  ^RightArrow   Right to last column displayed.
  ESC-{  ^LeftArrow    Left  to first column.
  F                    Forward forever; like "tail -f".
  ESC-F                Like F but stop when search pattern is found.
  r  ^R  ^L            Repaint screen.
  R                    Repaint screen, discarding buffered input.
        ---------------------------------------------------
        Default "window" is the screen height.
        Default "half-window" is half of the screen height.
 ---------------------------------------------------------------------------

                          SSEEAARRCCHHIINNGG

  /_p_a_t_t_e_r_n          *  Search forward for (_N-th) matching line.
  ?_p_a_t_t_e_r_n          *  Search backward for (_N-th) matching line.
  n                 *  Repeat previous search (for _N-th occurrence).
  N                 *  Repeat previous search in reverse direction.
  ESC-n             *  Repeat previous search, spanning files.
  ESC-N             *  Repeat previous search, reverse dir. & spanning files.
  ^O^N  ^On         *  Search forward for (_N-th) OSC8 hyperlink.
  ^O^P  ^Op         *  Search backward for (_N-th) OSC8 hyperlink.
  ^O^L  ^Ol            Jump to the currently selected OSC8 hyperlink.
  ESC-u                Undo (toggle) search highlighting.
  ESC-U                Clear search highlighting.
  &_p_a_t_t_e_r_n          *  Display only matching lines.
        ---------------------------------------------------
        A search pattern may begin with one or more of:
        ^N or !  Search for NON-matching lines.
        ^E or *  Search multiple files (pass thru END OF FILE).
        ^F or @  Start search at FIRST file (for /) or last file (for ?).
        ^K       Highlight matches, but don't move (KEEP position).
        ^R       Don't use REGULAR EXPRESSIONS.
        ^S _n     Search for match in _n-th parenthesized subpattern.
        ^W       WRAP search if no match found.
        ^L       Enter next character literally into pattern.
 ---------------------------------------------------------------------------

                           JJUUMMPPIINNGG

  g  <  ESC-<       *  Go to first line in file (or line _N).
  G  >  ESC->       *  Go to last line in file (or line _N).
  p  %              *  Go to beginning of file (or _N percent into file).
  t                 *  Go to the (_N-th) next tag.
  T                 *  Go to the (_N-th) previous tag.
  {  (  [           *  Find close bracket } ) ].
  }  )  ]           *  Find open bracket { ( [.
  ESC-^F _<_c_1_> _<_c_2_>  *  Find close bracket _<_c_2_>.
  ESC-^B _<_c_1_> _<_c_2_>  *  Find open bracket _<_c_1_>.
        ---------------------------------------------------
        Each "find close bracket" command goes forward to the close bracket 
          matching the (_N-th) open bracket in the top line.
        Each "find open bracket" command goes backward to the open bracket 
          matching the (_N-th) close bracket in the bottom line.

  m_<_l_e_t_t_e_r_>            Mark the current top line with <letter>.
  M_<_l_e_t_t_e_r_>            Mark the current bottom line with <letter>.
  '_<_l_e_t_t_e_r_>            Go to a previously marked position.
  ''                   Go to the previous position.
  ^X^X                 Same as '.
  ESC-m_<_l_e_t_t_e_r_>        Clear a mark.
        ---------------------------------------------------
        A mark is any upper-case or lower-case letter.
        Certain marks are predefined:
             ^  means  beginning of the file
             $  means  end of the file
 ---------------------------------------------------------------------------

                        CCHHAANNGGIINNGG FFIILLEESS

  :e [_f_i_l_e]            Examine a new file.
  ^X^V                 Same as :e.
  :n                *  Examine the (_N-th) next file from the command line.
  :p                *  Examine the (_N-th) previous file from the command line.
  :x                *  Examine the first (or _N-th) file from the command line.
  ^O^O                 Open the currently selected OSC8 hyperlink.
  :d                   Delete the current file from the command line list.
  =  ^G  :f            Print current file name.
 ---------------------------------------------------------------------------

                    MMIISSCCEELLLLAANNEEOOUUSS CCOOMMMMAANNDDSS

  -_<_f_l_a_g_>              Toggle a command line option [see OPTIONS below].
  --_<_n_a_m_e_>             Toggle a command line option, by name.
  __<_f_l_a_g_>              Display the setting of a command line option.
  ___<_n_a_m_e_>             Display the setting of an option, by name.
  +_c_m_d                 Execute the less cmd each time a new file is examined.

  !_c_o_m_m_a_n_d             Execute the shell command with $SHELL.
  #_c_o_m_m_a_n_d             Execute the shell command, expanded like a prompt.
  |XX_c_o_m_m_a_n_d            Pipe file between current pos & mark XX to shell command.
  s _f_i_l_e               Save input to a file.
  v                    Edit the current file with $VISUAL or $EDITOR.
  V                    Print version number of "less".
 ---------------------------------------------------------------------------

                           OOPPTTIIOONNSS

        Most options may be changed either on the command line,
        or from within less by using the - or -- command.
        Options may be given in one of two forms: either a single
        character preceded by a -, or a name preceded by --.

  -?  ........  --help
                  Display help (from command line).
  -a  ........  --search-skip-screen
                  Search skips current screen.
  -A  ........  --SEARCH-SKIP-SCREEN
                  Search starts just after target line.
  -b [_N]  ....  --buffers=[_N]
                  Number of buffers.
  -B  ........  --auto-buffers
                  Don't automatically allocate buffers for pipes.
  -c  ........  --clear-screen
                  Repaint by clearing rather than scrolling.
  -d  ........  --dumb
                  Dumb terminal.
  -D xx_c_o_l_o_r  .  --color=xx_c_o_l_o_r
                  Set screen colors.
  -e  -E  ....  --quit-at-eof  --QUIT-AT-EOF
                  Quit at end of file.
  -f  ........  --force
                  Force open non-regular files.
  -F  ........  --quit-if-one-screen
                  Quit if entire file fits on first screen.
  -g  ........  --hilite-search
                  Highlight only last match for searches.
  -G  ........  --HILITE-SEARCH
                  Don't highlight any matches for searches.
  -h [_N]  ....  --max-back-scroll=[_N]
                  Backward scroll limit.
  -i  ........  --ignore-case
                  Ignore case in searches that do not contain uppercase.
  -I  ........  --IGNORE-CASE
                  Ignore case in all searches.
  -j [_N]  ....  --jump-target=[_N]
                  Screen position of target lines.
  -J  ........  --status-column
                  Display a status column at left edge of screen.
  -k _f_i_l_e  ...  --lesskey-file=_f_i_l_e
                  Use a compiled lesskey file.
  -K  ........  --quit-on-intr
                  Exit less in response to ctrl-C.
  -L  ........  --no-lessopen
                  Ignore the LESSOPEN environment variable.
  -m  -M  ....  --long-prompt  --LONG-PROMPT
                  Set prompt style.
  -n .........  --line-numbers
                  Suppress line numbers in prompts and messages.
  -N .........  --LINE-NUMBERS
                  Display line number at start of each line.
  -o [_f_i_l_e] ..  --log-file=[_f_i_l_e]
                  Copy to log file (standard input only).
  -O [_f_i_l_e] ..  --LOG-FILE=[_f_i_l_e]
                  Copy to log file (unconditionally overwrite).
  -p _p_a_t_t_e_r_n .  --pattern=[_p_a_t_t_e_r_n]
                  Start at pattern (from command line).
  -P [_p_r_o_m_p_t]   --prompt=[_p_r_o_m_p_t]
                  Define new prompt.
  -q  -Q  ....  --quiet  --QUIET  --silent --SILENT
                  Quiet the terminal bell.
  -r  -R  ....  --raw-control-chars  --RAW-CONTROL-CHARS
                  Output "raw" control characters.
  -s  ........  --squeeze-blank-lines
                  Squeeze multiple blank lines.
  -S  ........  --chop-long-lines
                  Chop (truncate) long lines rather than wrapping.
  -t _t_a_g  ....  --tag=[_t_a_g]
                  Find a tag.
  -T [_t_a_g_s_f_i_l_e] --tag-file=[_t_a_g_s_f_i_l_e]
                  Use an alternate tags file.
  -u  -U  ....  --underline-special  --UNDERLINE-SPECIAL
                  Change handling of backspaces, tabs and carriage returns.
  -V  ........  --version
                  Display the version number of "less".
  -w  ........  --hilite-unread
                  Highlight first new line after forward-screen.
  -W  ........  --HILITE-UNREAD
                  Highlight first new line after any forward movement.
  -x [_N[,...]]  --tabs=[_N[,...]]
                  Set tab stops.
  -X  ........  --no-init
                  Don't use termcap init/deinit strings.
  -y [_N]  ....  --max-forw-scroll=[_N]
                  Forward scroll limit.
  -z [_N]  ....  --window=[_N]
                  Set size of window.
  -" [_c[_c]]  .  --quotes=[_c[_c]]
                  Set shell quote characters.
  -~  ........  --tilde
                  Don't display tildes after end of file.
  -# [_N]  ....  --shift=[_N]
                  Set horizontal scroll amount (0 = one half screen width).

                --exit-follow-on-close
                  Exit F command on a pipe when writer closes pipe.
                --file-size
                  Automatically determine the size of the input file.
                --follow-name
                  The F command changes files if the input file is renamed.
                --header=[_L[,_C[,_N]]]
                  Use _L lines (starting at line _N) and _C columns as headers.
                --incsearch
                  Search file as each pattern character is typed in.
                --intr=[_C]
                  Use _C instead of ^X to interrupt a read.
                --lesskey-context=_t_e_x_t
                  Use lesskey source file contents.
                --lesskey-src=_f_i_l_e
                  Use a lesskey source file.
                --line-num-width=[_N]
                  Set the width of the -N line number field to _N characters.
                --match-shift=[_N]
                  Show at least _N characters to the left of a search match.
                --modelines=[_N]
                  Read _N lines from the input file and look for vim modelines.
                --mouse
                  Enable mouse input.
                --no-keypad
                  Don't send termcap keypad init/deinit strings.
                --no-histdups
                  Remove duplicates from command history.
                --no-number-headers
                  Don't give line numbers to header lines.
                --no-search-header-lines
                  Searches do not include header lines.
                --no-search-header-columns
                  Searches do not include header columns.
                --no-search-headers
                  Searches do not include header lines or columns.
                --no-vbell
                  Disable the terminal's visual bell.
                --redraw-on-quit
                  Redraw final screen when quitting.
                --rscroll=[_C]
                  Set the character used to mark truncated lines.
                --save-marks
                  Retain marks across invocations of less.
                --search-options=[EFKNRW-]
                  Set default options for every search.
                --show-preproc-errors
                  Display a message if preprocessor exits with an error status.
                --proc-backspace
                  Process backspaces for bold/underline.
                --PROC-BACKSPACE
                  Treat backspaces as control characters.
                --proc-return
                  Delete carriage returns before newline.
                --PROC-RETURN
                  Treat carriage returns as control characters.
                --proc-tab
                  Expand tabs to spaces.
                --PROC-TAB
                  Treat tabs as control characters.
                --status-col-width=[_N]
                  Set the width of the -J status column to _N characters.
                --status-line
                  Highlight or color the entire line containing a mark.
                --use-backslash
                  Subsequent options use backslash as escape char.
                --use-color
                  Enables colored text.
                --wheel-lines=[_N]
                  Each click of the mouse wheel moves _N lines.
                --wordwrap
                  Wrap lines at spaces.


 ---------------------------------------------------------------------------

                          LLIINNEE EEDDIITTIINNGG

        These keys can be used to edit text being entered 
        on the "command line" at the bottom of the screen.

 RightArrow ..................... ESC-l ... Move cursor right one character.
 LeftArrow ...................... ESC-h ... Move cursor left one character.
 ctrl-RightArrow  ESC-RightArrow  ESC-w ... Move cursor right one word.
 ctrl-LeftArrow   ESC-LeftArrow   ESC-b ... Move cursor left one word.
 HOME ........................... ESC-0 ... Move cursor to start of line.
 END ............................ ESC-$ ... Move cursor to end of line.
 BACKSPACE ................................ Delete char to left of cursor.
 DELETE ......................... ESC-x ... Delete char under cursor.
 ctrl-BACKSPACE   ESC-BACKSPACE ........... Delete word to left of cursor.
 ctrl-DELETE .... ESC-DELETE .... ESC-X ... Delete word under cursor.
 ctrl-U ......... ESC (MS-DOS only) ....... Delete entire line.
 UpArrow ........................ ESC-k ... Retrieve previous command line.
 DownArrow ...................... ESC-j ... Retrieve next command line.
 TAB ...................................... Complete filename & cycle.
 SHIFT-TAB ...................... ESC-TAB   Complete filename & reverse cycle.
 ctrl-L ................................... Complete filename, list all.


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\index.js ---
import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\jsconfig.json ---
{
    "exclude": ["node_modules"]
}

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\metro.config.js ---
// Learn more https://docs.expo.io/guides/customizing-metro
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

module.exports = config;


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\package.json ---
{
  "name": "sash-app",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start --dev-client",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "lint": "expo lint",
    "postinstall": "patch-package"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.0.2",
    "@react-native-async-storage/async-storage": "1.23.1",
    "@react-native-google-signin/google-signin": "^13.1.0",
    "@react-navigation/bottom-tabs": "^7.0.0",
    "@react-navigation/native": "^7.0.0",
    "@rneui/themed": "^4.0.0-rc.8",
    "@shopify/flash-list": "^1.8.0",
    "@supabase/supabase-js": "^2.47.10",
    "base64-arraybuffer": "^1.0.2",
    "expo": "~52.0.20",
    "expo-auth-session": "~6.0.1",
    "expo-av": "~15.0.2",
    "expo-blur": "~14.0.1",
    "expo-constants": "~17.0.3",
    "expo-crypto": "~14.0.1",
    "expo-dev-client": "~5.0.8",
    "expo-file-system": "~18.0.6",
    "expo-font": "~13.0.2",
    "expo-haptics": "~14.0.0",
    "expo-image": "~2.0.3",
    "expo-image-picker": "~16.0.3",
    "expo-linking": "~7.0.3",
    "expo-random": "^14.0.1",
    "expo-router": "^4.0.15",
    "expo-splash-screen": "~0.29.18",
    "expo-status-bar": "~2.0.0",
    "expo-symbols": "~0.2.0",
    "expo-system-ui": "~4.0.6",
    "expo-video": "~2.0.3",
    "expo-web-browser": "~14.0.1",
    "lodash": "^4.17.21",
    "lodash.debounce": "^4.0.8",
    "lottie-react-native": "^7.1.0",
    "moment": "^2.30.1",
    "patch-package": "^8.0.0",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.76.5",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-pell-rich-editor": "^1.9.0",
    "react-native-performance": "^5.1.2",
    "react-native-reanimated": "~3.16.1",
    "react-native-render-html": "^6.3.4",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.1.0",
    "react-native-svg": "^15.10.1",
    "react-native-url-polyfill": "^2.0.0",
    "react-native-web": "~0.19.13",
    "react-native-webview": "^13.12.5"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@react-native-community/cli": "latest",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.3.12",
    "@types/react-test-renderer": "^18.3.0",
    "expo-module-scripts": "^4.0.2",
    "jest": "^29.2.1",
    "jest-expo": "~52.0.2",
    "react-test-renderer": "18.3.1",
    "typescript": "^5.3.3"
  },
  "private": true
}


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\postcard.txt ---
import { Alert, StyleSheet, Text, TouchableOpacity, View} from 'react-native'
import React, { useEffect } from 'react'
import { hp, wp } from '../helpers/common';
import { theme } from '../constants/theme';
import Avatar from './Avatar';
import moment from 'moment';
import Icon from '../assets/icons';
import RenderHTML from 'react-native-render-html';
import { Image } from 'expo-image';
import { getSupabaseFileUrl } from '../services/imageService';
import { Video } from 'expo-av';
import { useState } from 'react';
import { createPostLike, removePostLike } from '../services/postService';

const textStyle = {
    color: theme.colors.dark,
    fontSize: hp(1.75)
};
const tagsStyles = {
    div: textStyle,
    p: textStyle,
    ol: textStyle,
    h1: {
        color: theme.colors.dark
    },
    h4: {
        color: theme.colors.dark
    }
}
const PostCard = ({
    item,
    currentUser,
    router,
    hasShadow = true,

}) => {
    // const shadowStyles = {
    //     shadowOffset: {
    //         width: 1,
    //         height: 2
    //     },
    //     shadowOpacity: 0.06,
    //     shadowRadius: 6,
    //     elevation: 1,
    //     shadowColor: theme.colors.primaryDark2
    // }
    const glowingStyles = {
        shadowOffset: {
            width: 0,
            height: 0
        },
        shadowOpacity: 0.8,  // Adjust opacity to make the glow more visible
        shadowRadius: 20,    // Increase the radius to make the glow spread out
        elevation: 5,        // Works for Android (shadow-like effect)
        shadowColor: 'rgba(0, 255, 255, 0.8)', // Change this to a glowing color, e.g., cyan
    };

    const [likes, setLikes] = useState([]);
    useEffect(() => {
        // console.log('item is ',item)(postlike object ha item ke ander so niche bhi postlike)
        setLikes(item?.postlike);
    }, []);
    // console.log('post item: ', item);
    const openPostDetails = () => {
        //leave for now 
    }

    const onLike = async () => {
        if (liked) {
            // remove like
            let updatedLikes = likes.filter((like) => like.userid != currentUser?.id);
            setLikes([...updatedLikes]);
            let res = await removePostLike(item?.id, currentUser?.id);
            console.log('removed like:', res);
            if (!res.success) {
                Alert.alert('Post', 'Something went wrong!');
            }
        } else {
            // create like
            let data = {
                userid: currentUser?.id,
                postid: item?.id,

            };
            
            setLikes([...likes, data]);
            let res = await createPostLike(data);
            console.log('added like: ', res);
            if (!res.success) {
                Alert.alert('Post', 'Something went wrong!');
            }
        }

    };
    /*    // Toggle fullscreen on video click
       const handleVideoPress = () => {
         setIsFullScreen(!isFullScreen); // toggle fullscreen state
     } */
    //const [isFullScreen, setIsFullScreen] = useState(false); // state to control fullscreen

    // const likes=[];
    // console.log('Likes array:', likes);
    
    
    const createdAt = moment(item?.created_at).format('MMM D')// formate kar raha date ko MMM D se formate karega according to english month and day
    const liked = likes.filter(like => like.userid == currentUser?.id)[0] ? true : false;
    // console.log('post item:',item); this console log is just to check wheather my postlike array showing in items or not 


    return (
        // <View style={[styles.container, hasShadow && shadowStyles]}> // vy me sonu and orignal 
        <View style={[styles.container, hasShadow && glowingStyles]}>
            <View style={styles.header}>
                {/* user info  */}
                <View style={styles.userInfo}>
                    <Avatar
                        size={hp(4.5)}
                        uri={item?.user?.image}
                        rounded={theme.radius.md} />

                    <View style={{ gap: 2 }}>
                        <Text style={styles.username}>{item?.user?.name}</Text>
                        <Text style={styles.postTime}>{createdAt}</Text>
                        {/* need to formate the date showing by above item?.created  SO WEHVE TO INSTALL NPM I MOMENT*/}
                    </View>
                </View>
                <TouchableOpacity onPress={openPostDetails}>
                    <Icon name='threeDotsHorizontal' size={hp(4)} strowkewidth={4} color={theme.colors.textDark} />
                </TouchableOpacity>

            </View >
            {/* Post Body & media  */}
            <View style={styles.content}>
                <View style={styles.postBody}>

                    {/*  NOW KYU KI UPER SE JO BODY AYGA WO HTML RAHE GA THO USKE LIYE EK LIBRARY DOWNLOAD KARENGE TAKI USE HTML KO SHOW KAR PAYE ( OR YE KEH LO RENDER KAR PAY ) npm i react-native-render-html*/}
                    {
                        /*  below code if item?.body present ho tabhi run hoga RenderHtml  */
                        item?.body && (
                            <RenderHTML
                                contentWidth={wp(100)}
                                source={{
                                    html:
                                        item?.body || " "

                                    // but we see 3 warning in bottom due to this library but not affect any other thing so we can ignore them 
                                    // by
                                }}
                                tagsStyles={tagsStyles}
                            />
                        )
                    }


                </View>
                {/* post image showing in thiis div */}
                {
                    item?.file && item?.file?.includes('postImages') && (
                        // check if we have the file and its a image file so 
                        // we use inlcude function to check postImages words present in that fileName 
                        // if yes then its an image file 
                        <Image
                            source={getSupabaseFileUrl(item?.file)}
                            transition={100}
                            style={styles.postMedia}
                            contentFit='cover'
                        />
                    )
                }
                {/* post videos */}
                {
                    item?.file && item?.file?.includes('postVideos') && (

                        <Video
                            style={[styles.postMedia, { height: hp(30) }]}
                            source={getSupabaseFileUrl(item?.file)}
                            useNativeControls
                            resizeMode='cover'
                            isLooping
                        // shouldPlay={isFullScreen} // Ensures video plays only in fullscreen mode
                        // isMuted={!isFullScreen} // You can mute video in non-fullscreen mode
                        />

                    )
                }

            </View>
            {/* like, comment, share */}
            <View style={styles.footer}>
                <View style={styles.footerButton}>
                    <TouchableOpacity onPress={onLike}>
                        <Icon name="heart" size={24} fill={liked ? theme.colors.rose : 'transparent'} color={liked ? theme.colors.rose : theme.colors.textLight} />
                        {/* its color gonna be change when we click so make a const bollear liked = flase initialy  */}
                        {/*  dekho bhaii heart ke icon file mein dekho waha mein as prob ek fill karke option h jo apne yahan se yani 👆parent component se pass kar ke color fill karwa sakte ha  */}
                    </TouchableOpacity>
                    {/* text for like count  */}
                    <Text style={styles.count}>
                        {
                            likes?.length

                        }
                    </Text>
                </View>
                <View style={styles.footerButton}>
                    <TouchableOpacity>
                        <Icon name='comment' size={24} color={theme.colors.textLight} />{/* its color gonna be change when we click so make a const bollear liked = flase initialy  */}

                    </TouchableOpacity>
                    {/* text for comment count  */}
                    <Text style={styles.count}>
                        {
                            0
                        }
                    </Text>
                </View>
                <View style={styles.footerButton}>
                    <TouchableOpacity>
                        <Icon name='share' size={24} color={theme.colors.textLight} />{/* its color gonna be change when we click so make a const bollear liked = flase initialy  */}

                    </TouchableOpacity>

                </View>
            </View>
        </View>
    )
}

export default PostCard

/* const styles = StyleSheet.create({

    container: {
        gap: 10,
        marginBottom: 15,
        borderRadius: theme.radius.xxl * 1.1,
        borderCurve: 'continuous',
        padding: 10,
        paddingVertical: 12,
        backgroundColor: 'white',
        borderWidth: 0.5,
        borderColor: theme.colors.gray,
        shadowColor: '#000'
    }, */
const styles = StyleSheet.create({
    container: {
        gap: 10,
        marginBottom: 15,
        borderRadius: theme.radius.xxl * 1.1,
        borderCurve: 'continuous',
        padding: 10,
        paddingVertical: 12,
        backgroundColor: 'white',
        borderWidth: 0.5,
        borderColor: theme.colors.gray,
        shadowColor: '#000',
    },

    header: {
        flexDirection: 'row',
        justifyContent: 'space-between'
    },
    userInfo: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 8
    },

    username: {
        fontSize: hp(1.7),
        color: theme.colors.textDark,
        fontWeight: theme.fonts.medium,
    },

    postTime: {
        fontSize: hp(1.4),
        color: theme.colors.textLight,
        fontWeight: theme.fonts.medium,
    },

    content: {
        gap: 10,
        // marginBottom: 10,
    },

    postMedia: {
        height: hp(40),
        width: '100%',
        borderRadius: theme.radius.xl,
        borderCurve: 'continuous'
    },

    postBody: {
        marginLeft: 5,
    },

    footer: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 15
    },

    footerButton: {
        marginLeft: 5,
        flexDirection: 'row',
        alignItems: 'center',
        gap: 4
    },

    actions: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 18,
    },

    count: {
        color: theme.colors.text,
        fontSize: hp(1.8)
    }



})

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\app\index.tsx ---
import React from 'react';
import { View, Text, Button } from 'react-native';
import { useRouter } from 'expo-router';
import ScreenWrapper from '../components/ScreenWrapper'; // Assuming it's in the 'components' folder relative to the current file
import Loading from '../components/Loading';


const Index = () => {
  const router = useRouter();
  
  return (
    // no need , cause now we gonna check ki user ka session key active h y ni us hisab se usko home ya login page me rakhenge ge 
    // belwo comment code is veryfirst page off aap(index and , wellcome button wala)
    // <ScreenWrapper>
    //   <Text>Index</Text>
    //   {/* Correct Button Implementation */}
    //   <Button title="welcome😉" onPress={() => router.push('welcome')} />
    // </ScreenWrapper>

    //! checking for sesssion from supabase, do loading state after fetching , redirect to home
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
  {/* Display a loading message while the component is loading */}
    <Loading/>
    </View>
  );
};

export default Index;


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\app\login.jsx ---
import { Alert,Pressable, StyleSheet, Text, View } from 'react-native'
import React, { useRef, useState } from 'react'
import ScreenWrapper from '../components/ScreenWrapper'
import { theme } from '../constants/theme'
import { StatusBar } from 'expo-status-bar'
import BackButton from '../components/BackButton'
import { useRouter } from 'expo-router';
import Icon from '../assets/icons/index'
import { wp, hp } from '../helpers/common.js'
import Input from '../components/Input'
import Button from '../components/Button'
import { supabase } from '../lib/supabase'
import { createClient } from '@supabase/supabase-js'


const Login = () => {
  const router = useRouter();
  const emailRef = useRef("");
  
  const passwordRef = useRef("");
  const onSubmit = async () => {
    if (!emailRef.current || !passwordRef.current) {
      Alert.alert('Login', "please fill all the fields🥺!");
      return;
    }
    let email =emailRef.current.trim();// will remove unnecassary blankspaces
    let password = passwordRef.current.trim();// will remove unnecassary blankspaces
    setLoading(true);
    const {error} = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    setLoading(false);
    // console.log("error: ",error);
    if(error)
    {
      Alert.alert('Login',error.message);
    }
    // good to go we can call the api to check 'supa'
  };
  // just storing pass and email , we can also use useStates  but its verybad , everytime updates when user enter anythgnn unnecassy compputation badhadega
  const [loading, setLoading] = useState(false);
  return (
    <ScreenWrapper bg={"white"}>
      <StatusBar style="dark" />
      <View style={styles.container}>
        <BackButton router={router} />
        {/* welcome */}
        
        <View>
          <Text style={styles.welcomeText}>Hey, </Text>
          <Text style={styles.welcomeText}>Welcome Back</Text>
        </View>
        {/* form */}
        <View style={styles.form}>
          {/* Login message */}
          <Text style={{ fontSize: hp(1.5), color: theme.colors.text }}>
            Please login to continue
          </Text>

          {/* Input component with email icon */}
          <Input
            icon={<Icon name="mail" size={26} strokeWidth={1.6} />}
            placeholder='Enter your email'
            onChangeText={value => emailRef.current = value}
          // current value ko dal dega emailref pe 

          />
          <Input
            icon={<Icon name="lock" size={26} strokeWidth={1.6} />}
            placeholder='Enter your password'
            secureTextEntry
            // passwrod hide ho jay
            onChangeText={value => passwordRef.current = value}

          />
          <Text style={styles.forgotPassword}>
            Forgot Password?
          </Text>

          {/* button for login */}
          <Button title={'Login'} loading={loading} onPress={onSubmit} />
        </View>
        {/* footer */}
        <View style={styles.footer}>
          {/* Render the text "Don't have an account?" with the footerText style */}
          <Text style={styles.footerText}>
            Don't have an account?
          </Text>

          {/* Create a Pressable component for the "Sign up" link */}
          <Pressable onPress={()=>router.push('signUp')}>
            {/* Render the text "Sign up" within the Pressable component */}
            <Text style = {[styles.footerText, {color: theme.colors.primaryDark, fontWeight:theme.fonts.semibold}]}>Sign up</Text>
          </Pressable>
        </View>
      </View>
    </ScreenWrapper>
  );
};

export default Login

const styles = StyleSheet.create({
  container: {
    flex: 1,
    gap: 45,
    paddingHorizontal: wp(5),
  },
  welcomeText: {
    fontSize: hp(5),
    fontWeight: theme.fonts.bold,
    color: theme.colors.text,
  },
  form: {
    gap: 25,
  },
  forgotPassword: {
    textAlign: 'right',
    fontWeight: theme.fonts.semibold,
    color: theme.colors.text,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    gap: 5,
  },
  footerText: {
    textAlign: 'center',
    color: theme.colors.text,
    fontSize: hp(1.6),
  }
})

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\app\signUp.jsx ---
import { Alert, Pressable, StyleSheet, Text, View } from 'react-native'
import React, { useRef, useState } from 'react'
import ScreenWrapper from '../components/ScreenWrapper'
import { theme } from '../constants/theme'
import { StatusBar } from 'expo-status-bar'
import BackButton from '../components/BackButton'
import { useRouter } from 'expo-router';
import Icon from '../assets/icons/index'
import { wp, hp } from '../helpers/common.js'
import Input from '../components/Input'
import Button from '../components/Button'
import { supabase } from '../lib/supabase'
import * as webBrowser from "expo-web-browser"
import * as Google from "expo-auth-session/providers/google"
import AsyncStorage from "@react-native-async-storage/async-storage"
// import { AndroidId, webId } from '../constants'

webBrowser.maybeCompleteAuthSession();

// web 436794015973-2mo0iluvu5lqonkg5uptde6s6natqm9r.apps.googleusercontent.com
// android 436794015973-ge8kijt1snbie5l1cde673d43iadsp5q.apps.googleusercontent.com

const SignUp = () => {

  const [userInfo, setUserInfo] = React.useState(null);


  const router = useRouter();
  const emailRef = useRef("");
  const nameRef = useRef("");
  const passwordRef = useRef("");
  const onSubmit = async () => {
    if (!emailRef.current || !passwordRef.current) {
      // ! One kinda mistake ki user may reggister with only email and password no need to enter name 
      Alert.alert('SignUp', "please fill all the fields🥺!");
      return;

    }
    // good to go we can call the api to check 'supa'
    let name = nameRef.current.trim();// will remove unnecassary blankspaces
    let email = emailRef.current.trim();// will remove unnecassary blankspaces
    let password = passwordRef.current.trim();// will remove unnecassary blankspaces

    setLoading(true);
    const { data: { session }, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data:
        {
          name, email
        }
      }
    });
    setLoading(false);
    // this below console loge is to check singup pe sab sahi ja rah a h ki ni , u can try it 
    // console.log('session: ',session);
    // console.log('error: ',error);
    if (error) {
      Alert.alert('Sign up', error.message);
    }

  };
  // just storing pass and email , we can also use useStates  but its verybad , everytime updates when user enter anythgnn unnecassy compputation badhadega
  const [loading, setLoading] = useState(false);
  return (
    <ScreenWrapper bg={"white"}>
      <StatusBar style="dark" />
      <View style={styles.container}>
        <BackButton router={router} />
        {/* welcome */}
        <View>
          <Text style={styles.welcomeText}>Hey Buddy, </Text>
          <Text style={styles.welcomeText}>Let's Get Started</Text>
        </View>
        {/* form */}
        <View style={styles.form}>
          {/* Login message */}
          <Text style={{ fontSize: hp(1.5), color: theme.colors.text }}>
            Enter your details below to create a new account and join us!🎉
          </Text>

          {/* Input component with email icon */}
          <Input
            icon={<Icon name="mail" size={26} strokeWidth={1.6} />}
            placeholder='Enter your email'
            onChangeText={value => emailRef.current = value}
          // current value ko dal dega emailref pe 

          />
          <Input
            icon={<Icon name="user" size={26} strokeWidth={1.6} />}
            placeholder='Enter your name'
            onChangeText={value => nameRef.current = value}
          // current value ko dal dega emailref pe 

          />
          <Input
            icon={<Icon name="lock" size={26} strokeWidth={1.6} />}
            placeholder='Enter your password'
            secureTextEntry
            // passwrod hide ho jay
            onChangeText={value => passwordRef.current = value}

          />


          {/* button for login */}
          <Button title={'SignUp'} loading={loading} onPress={onSubmit} />
        </View>
        {/* footer */}
        <View style={styles.footer}>
          {/* Render the text "Don't have an account?" with the footerText style */}
          <Text style={styles.footerText}>
            Already have an account!
          </Text>

          {/* Create a Pressable component for the "Sign up" link */}
          <Pressable onPress={() => router.push('login')}>
            {/* Render the text "Sign up" within the Pressable component */}
            <Text style={[styles.footerText, { color: theme.colors.primaryDark, fontWeight: theme.fonts.semibold }]}>Login</Text>
          </Pressable>
        </View>
      </View>
    </ScreenWrapper>
  )
}

export default SignUp

const styles = StyleSheet.create({
  container: {
    flex: 1,
    gap: 45,
    paddingHorizontal: wp(5),
  },
  welcomeText: {
    fontSize: hp(5),
    fontWeight: theme.fonts.bold,
    color: theme.colors.text,
  },
  form: {
    gap: 25,
  },
  forgotPassword: {
    textAlign: 'right',
    fontWeight: theme.fonts.semibold,
    color: theme.colors.text,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    gap: 5,
  },
  footerText: {
    textAlign: 'center',
    color: theme.colors.text,
    fontSize: hp(1.6),
  }
})

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\app\welcome.jsx ---
import { StyleSheet, Text, View ,Pressable} from 'react-native'
import React from 'react'
import ScreenWrapper from '../components/ScreenWrapper.jsx'
import { StatusBar } from 'expo-status-bar'
import { hp, wp } from '../helpers/common'
import { Image } from 'react-native'
import { theme } from '../constants/theme.js'
import Button from '../components/Button.jsx'
import { useRouter } from 'expo-router'
import Login from './login.jsx'
import SignUp from './signUp.jsx'
const welcome = () => {
  const router = useRouter();
  return (
    <ScreenWrapper bg="white">
      <StatusBar style="dark" />
      <View style={styles.container}>
        <Image style={styles.welcomeImage} resizeMode='contain' source={require('../assets/images/welcome2.png')} />
        {/* titel */}
        <View style={{ gap: 20 }}>
          <Text style={styles.title}>SimpleHub!</Text>
          {/* <Text style={styles.punchline}>Stay in the loop, share your world, and connect authentically.</Text> */}
          <Text style={styles.punchline}>Where your voice is valued, and every connection feels authentic and true.</Text>
        </View>
        {/* yahan se footer start hoga  */}
        <View style={styles.footer}>
          {/* now wwe will make button.jsx inside component jisme apan getstarted wala butoton ka kam karenge  */}
          <View style={styles.footer}>
            <Button
              title="Getting Started"
              buttonStyle={{ marginHorizontal: wp(3) }}
              onPress={() => router.push('signUp')}
            />
            <View style={styles.bottomTextContainer}>
              <Text style={styles.loginText}>Already have an account!</Text>
              <Pressable onPress={()=> router.push('login')}>
                <Text style={[styles.loginText,{color: theme.colors.primaryDark,fontWeight: theme.fonts.semibold}]}>Login</Text>
              </Pressable>
            </View>
          </View>

        </View>
      </View>

    </ScreenWrapper>
  )
}

export default welcome

const styles = StyleSheet.create({

  container: {
    flex: 1,
    justifyContent: 'space-around',
    backgroundColor: 'white',
    alignItems: 'center',
    paddingHorizontal: wp(4),
  },
  welcomeImage: {
    // Set the height of the image to 30% of the device height
    height: hp(35),

    // Set the width of the image to 100% of the device width
    width: wp(100),

    // Center the image within its parent container
    alignSelf: 'center',
    top:35
  },
  title: {
    color: theme.colors.text,
    fontSize: hp(4),
    textAlign: 'center',
    fontWeight: theme.fonts.extraBold,
  },
  punchline: {
    textAlign: 'center',
    paddingHorizontal: wp(10),
    fontSize: hp(1.7),
    color: theme.colors.text,
  },
  footer: {
    gap: 30,
    width: '100%',
  },bottomTextContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    gap: 5
  },
  
  loginText: {
    textAlign: 'center',
    color: theme.colors.text,
    fontSize: hp(1.6)
  }
})


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\app\_layout.jsx ---
import { View, Text, LogBox } from 'react-native';
import React, { useEffect } from 'react';
import { Stack ,useRouter} from 'expo-router';
import { AuthProvider, useAuth } from '../context/AuthContext';
import { supabase } from '../lib/supabase';
import { getUserData } from '../services/userService';

LogBox.ignoreLogs(['Warning: TNodeChildrenRenderer','Warning: MemoizedTNodeRenderer','Warning: TRenderEngineProvider']);
// this log box.will ignore the warning mention in line 67in postCard


const _layout = ()=>
{
  return (
    <AuthProvider>
      <MainLayout/>
    </AuthProvider>
  )
}
const MainLayout = () => {
  const {setAuth,setUserData} = useAuth();
  const router = useRouter();

  useEffect(()=>{

// bellow is the auth listern it trigger every time when user login , register,logsout
    supabase.auth.onAuthStateChange((_event, session)=>
    {
      // console.log('session user: ',session?.user?.id);
      // uper walle code se id and user ka (?) hata doge to purrra session detial (user meta deta mill jayga    ) 
      
      // setSession(session);
      if(session)//agar session ture h yani user login h tho home me jane bol sakte ha 
      {

        
        setAuth(session?.user);

        updateUserData(session?.user,session?.user?.email);  
        console.log('authuser: ',session?.user?.email);
        
        router.replace('main/home');// we willl replace current route so u user cannot go back to welcome page again 
        //first set auth is user ke liye 
        // move to home screen f
      }
      else{
        setAuth(null);
        router.replace('/welcome');
        //set auth to null 
        // move to welcom screen 

      };
    });
    // return () => unsubscribe(); 
  },[]);//need to add this empty array very neccessary , for dependences , warna glitch hoga 

  const updateUserData = async(user,email)=>{
    let res = await getUserData(user?.id);
    console.log('got users data: ',res); // this shows yes we successfuly got the datas (name,bio,image,phoneno ...)
    if(res.success) setUserData({...res.data,email});
  }
  return (
    <Stack
      screenOptions={{
        headerShown: false, // Set header visibility to false
      }}
    />
  );
};

export default _layout;


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\app\main\editProfile.jsx ---
import { ScrollView, Pressable, StyleSheet, Text, View, Alert } from 'react-native'
import React, { useEffect } from 'react'
import ScreenWrapper from '../../components/ScreenWrapper'
import { hp, wp } from '../../helpers/common'
import { theme } from '../../constants/theme'
import { useAuth } from '../../context/AuthContext'
import { getUserImageSrc, uploadFile } from '../../services/imageService'
import Icon from '../../assets/icons'
import Header from '../../components/Header'
import { Image } from 'expo-image'
import { useState } from 'react'
import Input from '../../components/Input'
import Button from '../../components/Button'
import Loading from '../../components/Loading'
import { updateUser } from '../../services/userService'
import { router, useRouter } from 'expo-router'
import * as ImagePicker from 'expo-image-picker';

const EditProfile = () => {
    const { user: currentUser, setUserData } = useAuth();
    const [loading, setLoading] = useState(false);
    const router = useRouter();
    // dekho uper wala bhi initially user likhe hua tha per kyu  ki hm 
    // niche wale funciton mem user chaiye tho uper wale ka nam current  user kr diye
    const [user, setUser] = useState({

        name: '',
        phoneNumber: '',
        image: null,
        bio: '',
        address: ''
    })

    // ye marked ha book mark in port player 2h:32m
    // bol raha current user

    useEffect(() => {
        // Check if `currentUser` exists
        if (currentUser) {
            // Update the `user` state with `currentUser` data
            setUser({
                name: currentUser.name || '',       // Set name or default to an empty string
                phoneNumber: currentUser.phoneNumber || '',  // Set phone number or default to empty string
                image: currentUser.image || null,    // Set image or default to null
                address: currentUser.address || '',  // Set address or default to an empty string
                bio: currentUser.bio || '',          // Set bio or default to an empty string
            });
        }
    }, [currentUser]); // Re-run this effect whenever `currentUser` changes

    const onPickImage = async () => {
        // pre requsite to install npx expo install expo-image-picker and import
        // ! for more learnign must visit "docs.expo.dev/versions/latest/sdk/imagepicker/#configuration-in-appjsonappconfigjs" 

        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ['images'], // u can also consider videos like ['image','videos']
            allowsEditing: true,
            aspect: [3, 3],
            quality: 0.7,// originally is 1 but for less data uses ill make it 0.7
        })
        if (!result.canceled) {
            setUser({ ...user, image: result.assets[0] });

            // eske baad apne ye line change kiya line90 : let image...
        }

    }
    const onSubmit = async () => {
        let userData = { ...user };//user ki shallow copy create karna taki unnecassy update no jay apna origanal user 

        let { name, phoneNumber, address, image, bio } = userData;//destucturing simple extracting name , pno. ..etc for easier access form user data
        if (!name || !phoneNumber || !address || !bio) { 
            //! sonu , Sonu  ek khatara change kiya hun uper se (...!bio || !image ) essa tha image hata diya i want jarrori ni update karne time profile bhi update karna pade 
            Alert.alert('Profile', "Please fill all the fields!");
            return;
        }
        setLoading(true);
        if (typeof image == 'object') {
        
            //!  we will have to upload image in database ( for that we have to make bucket in supabase 2:44:48)
            // ! now inside imageService we will write exprot function ''
            let imageRes = await uploadFile('porfiles', image?.uri, true);
            // passing folder name (profile), and uri of image
            if (imageRes.success) userData.image = imageRes.data; //imageRes ko 2 chiz return hogi { ture , data(imagepath)} where data is  itself(data.path)
            else userData.image = null; // u can also throw error but let's not 

        }
        //update user detial

        //res = response 
        const res = await updateUser(currentUser?.id, userData);
        setLoading(false);
        console.log('update user result: ', res);
        // ! yahan tak user table tho update ho chuka per auth taible mein huaa hoga reflect ye 
        // tho ab niche reflect karenge (if upddate sucess then , setuser data ( cureentuser ka deta + just updated data(userData)))
        if (res.success) {
            setUserData({ ...currentUser, ...userData });
            router.back();
        }
    }
    let imageSource = user.image && typeof user.image == 'object' ? user.image.uri : getUserImageSrc(user.image);
    //  condition bola image h and vo object tyep ka ha yani key value  pair tho ( use object se sirf uri wala part do )
    //  agar object ni tho simple getuserImgarsrc se usre ka image do 

    return (
        <ScreenWrapper bg="white">
            <View style={styles.container}>
                <ScrollView style={{ flex: 1 }}>
                    <Header title="Edit Profile" />
                    {/* form */}
                    <View style={styles.form}>
                        <View style={styles.avatarContainer}>
                            <Image source={imageSource} style={styles.avatar} />
                            <Pressable style={styles.cameraIcon} onPress={onPickImage}>
                                <Icon name="camera" size={20} strokeWidth={2.5} />
                            </Pressable>
                        </View>
                        <Text style={{ fontSize: hp(1.5), color: theme.colors.text }}>
                            Please fill your profile details
                        </Text>
                        <Input
                            icon={<Icon name="user" />}
                            placeholder="Enter your name"
                            value={user.name}
                            // uper walla code by defalut user's name show karege 
                            onChangeText={(value) => setUser({ ...user, name: value })
                                //  ye  bol raha jo naya value 
                            }
                        />
                        <Input
                            icon={<Icon name="call" />}
                            placeholder="Enter your phone number"
                            value={user.phoneNumber}
                            // uper walla code by defalut user's name show karege 
                            onChangeText={(value) => setUser({ ...user, phoneNumber: value })
                                //  ye  bol raha jo naya value 
                            }
                        />
                        <Input
                            icon={<Icon name="location" />}
                            placeholder="Enter your address"
                            value={user.address}
                            // uper walla code by defalut user's name show karege 
                            onChangeText={(value) => setUser({ ...user, address: value })
                                //  ye  bol raha jo naya value 
                            }
                        />

                        <Input
                            placeholder="Enter your bio"
                            value={user.bio}
                            multiline={true}
                            containerStyle={styles.bio}
                            // uper walla code by defalut user's name show karege 
                            onChangeText={(value) => setUser({ ...user, bio: value })
                                //  ye  bol raha jo naya value 
                            }
                        />
                        <Button title='Update' loading={loading} onPress={onSubmit} />
                    </View>
                </ScrollView>
            </View>
        </ScreenWrapper>
    )
}

export default EditProfile

const styles = StyleSheet.create({

    container: {
        flex: 1,
        paddingHorizontal: wp(4)
    }, avatarContainer: {
        height: hp(14),
        width: hp(14),
        alignSelf: 'center',
    },
    avatar: {
        width: '100%',
        height: '100%',
        borderRadius: theme.radius.xxl * 1.8,
        borderCurve: 'continuous',
        borderWidth: 1,
        borderColor: theme.colors.darkLight,
    },
    cameraIcon: {
        position: 'absolute',
        bottom: 0,
        right: -10,
        padding: 8,
        borderRadius: 50,
        backgroundColor: 'white',
        shadowColor: theme.colors.textLight,
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.4,
        shadowRadius: 5,
        elevation: 7,
    }, form: {
        gap: 18,
        marginTop: 20,
    },
    input: {
        flexDirection: 'row',
        borderWidth: 0.4,
        borderColor: theme.colors.text,
        borderRadius: theme.radius.xxl,
        borderCurve: 'continuous',
        padding: 17,
        paddingHorizontal: 20,
        gap: 15
    },
    bio: {
        flexDirection: 'row',
        height: hp(15),
        alignItems: 'flex-start',
        paddingVertical: 10,
    }



})

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\app\main\home.jsx ---
import React, {
  useEffect,
  useCallback,
  memo,
  useMemo,
  useState,
} from "react";
import {
  Alert,
  FlatList,
  Pressable,
  StyleSheet,
  Text,
  View,
} from "react-native";
import ScreenWrapper from "../../components/ScreenWrapper";
import { useAuth } from "../../context/AuthContext";
import { supabase } from "../../lib/supabase";
import { Button } from "react-native";
import { hp, wp } from "../../helpers/common";
import { theme } from "../../constants/theme";
import Icon from "../../assets/icons";
import { useFocusEffect, useRouter } from "expo-router";
import Avatar from "../../components/Avatar";
import { fetchPosts } from "../../services/postService";
import PostCard from "../../components/PostCard";
import Loading from "../../components/Loading";
import { getUserData } from "../../services/userService";

let limit = 0;

const Home = () => {
  const router = useRouter();
  const { user, setAuth } = useAuth();
  const [currentlyPlayingPostId, setCurrentlyPlayingPostId] = useState(null);
  const [posts, setPosts] = useState([]);
  const [hasMore, setHasMore] = useState(true);
  const [notificationCount, setnotificationCount] = useState(0);
  const [autoPlayEnabled, setAutoPlayEnabled] = useState({});

  // Redirect to login if there is no user.
  useEffect(() => {
    // if (!user) {
    //   router.replace("./login");
    // }
  }, [user, router]);

  // This hook always runs so that hook order remains consistent.
  useFocusEffect(
    useCallback(() => {
      if (!user) {
        // Reset state when user logs out
        setPosts([]);
        setHasMore(true);
      }
    }, [user])
  );

  const handleVideoPlay = useCallback((postId) => {
    setAutoPlayEnabled((prev) => ({ ...prev, [postId]: false }));
    setCurrentlyPlayingPostId((prev) => (prev === postId ? null : postId));
  }, []);

  const handleViewableItemsChanged = useCallback(
    ({ viewableItems, changed }) => {
      // Reset auto-play for items that leave view
      changed.forEach(({ item, isViewable }) => {
        if (!isViewable && item.file?.includes("postVideos")) {
          setAutoPlayEnabled((prev) => {
            const newState = { ...prev };
            delete newState[item.id];
            return newState;
          });
        }
      });

      // Find first eligible video to play
      const firstVisibleVideo = viewableItems.find(
        ({ item }) =>
          item.file?.includes("postVideos") &&
          (autoPlayEnabled[item.id] ?? true)
      );

      setCurrentlyPlayingPostId(firstVisibleVideo?.item.id || null);
    },
    [autoPlayEnabled]
  );

  const viewabilityConfig = {
    itemVisiblePercentThreshold: 70,
    minimumViewTime: 300,
  };

  const handlePostEvent = useCallback(async (payload) => {
    console.log("Post event payload:", payload);

    if (payload.eventType === "INSERT" && payload?.new?.id) {
      const newPost = { ...payload.new };
      const res = await getUserData(newPost.userid);
      newPost.postLikes = [];
      newPost.comments = [{ count: 0 }];
      newPost.user = res.success ? res.data : {};
      setPosts((prev) => [newPost, ...prev]);
    }

    if (payload.eventType === "DELETE" && payload.old.id) {
      setPosts((prev) => prev.filter((post) => post.id !== payload.old.id));
    }

    if (payload.eventType === "UPDATE" && payload?.new?.id) {
      setPosts((prev) =>
        prev.map((post) =>
          post.id === payload.new.id
            ? { ...post, body: payload.new.body, file: payload.new.file }
            : post
        )
      );
    }
  }, []);

  const handleNewNotification = useCallback((payload) => {
    console.log("New notification payload:", payload);
    if (payload.eventType === "INSERT" && payload?.new?.id) {
      setnotificationCount((prev) => prev + 1);
    }
  }, []);

  useFocusEffect(
    useCallback(() => {
      // This runs when the screen gains focus
      return () => {
        // Cleanup when the screen loses focus: stop all videos
        setCurrentlyPlayingPostId(null);
      };
    }, [])
  );

  useEffect(() => {
    if (!user) return;

    const postChannel = supabase
      .channel("posts")
      .on(
        "postgres_changes",
        { event: "*", schema: "public", table: "posts" },
        handlePostEvent
      )
      .subscribe();

    const notificationChannel = supabase
      .channel("notifications")
      .on(
        "postgres_changes",
        {
          event: "INSERT",
          schema: "public",
          table: "notifications",
          filter: `receiverid=eq.${user?.id}`,
        },
        handleNewNotification
      )
      .subscribe();

    return () => {
      supabase.removeChannel(postChannel);
      supabase.removeChannel(notificationChannel);
      setPosts([]);
      setCurrentlyPlayingPostId(null);
    };
  }, [user?.id, handlePostEvent, handleNewNotification]);

  const getPosts = useCallback(async () => {
    if (!hasMore) return;
    limit += 5;

    console.log("Fetching posts with limit:", limit);
    const res = await fetchPosts(limit);

    if (res.success) {
      setHasMore(posts.length !== res.data.length);
      setPosts(res.data);
    }
  }, [hasMore, posts.length]);

  const renderItem = useCallback(
    ({ item }) => (
      <MemoizedPostCard
        item={item}
        currentUser={user}
        router={router}
        currentlyPlayingPostId={currentlyPlayingPostId}
        setCurrentlyPlayingPostId={setCurrentlyPlayingPostId}
        onVideoPlay={handleVideoPlay}
      />
    ),
    [user, router, currentlyPlayingPostId, handleVideoPlay]
  );

  const ListFooter = useMemo(
    () =>
      hasMore ? (
        <View style={{ marginVertical: posts.length === 0 ? 275 : 30 }}>
          <Loading />
        </View>
      ) : (
        <View style={{ marginVertical: 30 }}>
          <Text style={styles.noPosts}>No more posts</Text>
        </View>
      ),
    [hasMore, posts.length]
  );

  return (
    <ScreenWrapper bg={"white"} paddingTop={hp(2.5)}>
      {/* Always render the same number of hooks.
          If there is no user, render a placeholder (and the redirect effect will run). */}
      {!user ? (
        <View style={{ flex: 1 }} />
      ) : (
        <View style={styles.container}>
          <View style={styles.header}>
            <Text style={styles.title}>SimpleHub</Text>
            <View style={styles.icons}>
              <Pressable
                onPress={() => {
                  setnotificationCount(0);
                  router.push("./notifications");
                }}
              >
                <Icon
                  name="heart"
                  size={hp(3.2)}
                  strokeWidth={2}
                  color={theme.colors.text}
                />
                {notificationCount > 0 && (
                  <View style={styles.pill}>
                    <Text style={styles.pillText}>{notificationCount}</Text>
                  </View>
                )}
              </Pressable>
              <Pressable onPress={() => router.push("./newpost")}>
                <Icon
                  name="plus"
                  size={hp(3.2)}
                  strokeWidth={2}
                  color={theme.colors.text}
                />
              </Pressable>
              <Pressable onPress={() => router.push("./profile")}>
                <Avatar
                  uri={user?.image}
                  size={hp(4.3)}
                  rounded={theme.radius.sm}
                  style={{ borderWidth: 2 }}
                />
              </Pressable>
            </View>
          </View>

          <FlatList
            initialNumToRender={10}
            maxToRenderPerBatch={5}
            windowSize={10}
            removeClippedSubviews={true}
            data={posts}
            showsVerticalScrollIndicator={false}
            contentContainerStyle={styles.listStyle}
            keyExtractor={(item) => item.id.toString()}
            renderItem={renderItem}
            onEndReached={getPosts}
            onEndReachedThreshold={0.5}
            ListFooterComponent={ListFooter}
            updateCellsBatchingPeriod={100}
            onViewableItemsChanged={handleViewableItemsChanged}
            viewabilityConfig={viewabilityConfig}
          />
        </View>
      )}
    </ScreenWrapper>
  );
};

// Memoized PostCard component to prevent unnecessary re-renders
const MemoizedPostCard = memo(
  PostCard,
  (prev, next) =>
    prev.item.id === next.item.id &&
    prev.currentlyPlayingPostId === next.currentlyPlayingPostId &&
    prev.item.body === next.item.body &&
    prev.item.file === next.item.file &&
    prev.item.postLikes?.length === next.item.postLikes?.length &&
    prev.item.comments?.count === next.item.comments?.count &&
    prev.setCurrentlyPlayingPostId === next.setCurrentlyPlayingPostId &&
    prev.item.user?.image === next.item.user?.image
);

export default Home;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: hp(-1.5),
  },
  welcome: {
    height: 300,
    aspectRatio: 1,
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    marginBottom: 10,
    marginHorizontal: wp(4),
  },
  title: {
    color: theme.colors.text,
    fontSize: hp(3.2),
    fontWeight: theme.fonts.bold,
  },
  avatarImage: {
    height: hp(4.3),
    width: hp(4.3),
    borderRadius: theme.radius.sm,
    borderCurve: "continuous",
    borderColor: theme.colors.gray,
    borderWidth: 3,
  },
  icons: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    gap: 18,
  },
  listStyle: {
    paddingTop: 20,
    paddingHorizontal: wp(4),
  },
  noPosts: {
    fontSize: hp(2),
    textAlign: "center",
    color: theme.colors.text,
  },
  pill: {
    position: "absolute",
    right: -10,
    top: -4,
    height: hp(2.2),
    width: hp(2.2),
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 20,
    backgroundColor: theme.colors.notification,
  },
  pillText: {
    color: "white",
    fontSize: hp(1.2),
    fontWeight: theme.fonts.bold,
  },
});


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\app\main\newpost.jsx ---
import { StyleSheet, Text, TouchableOpacity, View, Image, Pressable,Alert } from 'react-native'
import React, { useEffect, useState } from 'react'
import ScreenWrapper from '../../components/ScreenWrapper'
import Header from '../../components/Header'
import { hp, wp } from '../../helpers/common'
import { theme } from '../../constants/theme'
import { ScrollView } from 'react-native'
import Avatar from '../../components/Avatar'
import { useAuth } from '../../context/AuthContext'
import RichTextEditor from '../../components/RichTextEditor'
import { useLocalSearchParams, useRouter } from 'expo-router'
import { useRef } from 'react'
import Icon from '../../assets/icons'
import Button from '../../components/Button'
import * as ImagePicker from 'expo-image-picker'
import { getSupabaseFileUrl } from '../../services/imageService'
import { Video } from 'expo-av'
import { createOrUpdatePost } from '../../services/postService'
// import { Image } from 'react-native-web'

const NewPost = () => {
  const post = useLocalSearchParams();
  // uselocalserachparam is a hook which is used to get the data from the previous screen // and make sure u passed that data form preivouse screen
  console.log('post:', post); 
  const { user } = useAuth();
  const bodyRef = useRef("");
  const editorRef = useRef("");
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [file, setFile] = useState(false);// this hook is for if we upload images or videos


  useEffect(( ) => {
    if(post && post.id){
      bodyRef.current = post.body;
      setFile(post.file || null);
      setTimeout(() => {
        
        editorRef?.current?.setContentHTML(post.body);
      }, 300);
    }

  }, [])
  const onPick = async (isImage) => {

    let mediaConfig = {

      mediaTypes: ['images'],
      allowsEditing: true,
      aspect: [3, 3],
      quality: 0.7,
    }
    if (!isImage) {
      mediaConfig = {
        mediaTypes: ['videos'],
        allowsEditing: true,
      }
    }
    let result = await ImagePicker.launchImageLibraryAsync(mediaConfig);
    console.log('file:', result.assets[0])
    // 0 mane aap jab file chonoge tho first file ki baat ho bs 
    // ye console batayga file jo choose kiye uske properties 
    /* file: {"assetId": null, "base64": null, "duration": null, "exif": null, "fileName": "22867607-eaad-4153-b25c-1b3b687f68f7.png", "fileSize": 470971, "height": 1180, "mimeType": "image/png", "rotation": null, "type": "image", "uri": "file:///data/user/0/com.nik1214.SASHapp/cache/ImagePicker/22867607-eaad-4153-b25c-1b3b687f68f7.png", "width": 1180} */
    if (!result.canceled) {

      setFile(result.assets[0]);// jobhi aap file select karoge vo SetFile mein yani mein aajaynga 
    }
  }
  const isLocalFile = file => {
    if (!file) return null;
    if (typeof file == 'object') return true; // bol raha agar file object type ka h yani ki local storage se liye gaya h (tho ture kar do )
    return false;
  }
  const getFileType = file =>{
    if (!file) return null;
    if (isLocalFile(file)) {  
      console.log('file type:',file.type);
      return file.type;
    }
      
      // will return either video type or image type kyu ki 
      // file apna wahan se aaraha ha (setFile(result.assest[0])); yani ek object ke form mein tho type hoga hi object mein (uri,metadata ,type sab store hota ha )
      
      // check image or video for remort file ( yani jab post edidt karoge tho post thodi local se ayga na vo tho server se ayga na )
      if (file.includes('postImages')) {
        //agar file postimaegs se aya yani pakka image file ha 
        return 'image';
      }
      return 'video';// verna video file ha 
    

    }
  
  const getFileUri = file => {
    if (!file) return null;
    if (isLocalFile(file)) {
      return file.uri;
    }
    return getSupabaseFileUrl(file)?.uri; // ? is just a safty feature bolata agar man lo ye function jo object de raha vo null ya undefind de diya ya uri ha hi ni tho Typeerror dene ki jagah mein boldunga Log:undefiend(better then error)
  }
  const onSubmit = async () => {
    if (!bodyRef.current && !file) {
      Alert.alert('Post', 'please choose an Image or add the post body');
      return;
    }
    // agar dono h tho data save karo upload krne ke liye
    let data = {
      file,
      body: bodyRef.current,
      userid: user?.id,

    }
    if(post && post.id)// agar post h and post ke ander id bhi h to update karo
    {
        data.id = post.id;
    }
    // creat post 
    setLoading(true);
    let res = await createOrUpdatePost(data);
    setLoading(false);
    // console.log('post result: ',res);
    if(res.success)
    {
      // console.log('file should be not null now ',file)
      setFile(null);// if post updated set file null 
      bodyRef.current='';
      editorRef.current?.setContentHTML('');
      router.back();
      // console.log('file should be null now ',file)
    }
    else 
    {
      Alert.alert('Post',res.msg);
    }



    // console.log('body: ',bodyRef.current);
    // console.log('file: ',file);

  }

  return (
    <ScreenWrapper bg="white">
      <View style={styles.container}>

        <Header title="Creat Post" />
        <ScrollView contentContainerStyle={{ gap: 20 }}>
          {/* content containerstyle se itemse ke beech gap mil jayga */}
          {/* avatar  */}
          <View style={styles.header}>
            <Avatar
              uri={user?.image}
              size={hp(6.5)}
              rounded={theme.radius.xl}
            />
            <View style={{ gap: 2 }}>
              <Text style={styles.username}>
                {
                  user && user.name
                }

              </Text>
              <Text style={styles.publicText}>

                public


              </Text>
            </View>
          </View>

          <View style={styles.textEditor}>
            {/* now for editor we use reactnative library (pell rich editor) */}
            <RichTextEditor editorRef={editorRef} onChange={body => bodyRef.current = body} />
            {/* <Pressable style={styles.editIcon} onPress={() => setFile(null)}>
                  <Icon name='edit' size={20} color='white' />
                </Pressable> */}
          </View>
          {
            // if file exsit then we show the view 
            file && (
              <View style={styles.file}>
                {
                  getFileType(file) == 'video' ? (

                    <>
                      <Video
                        style={{
                          flex: 1
                        }}
                        source={{
                          uri: getFileUri(file)
                        }}
                        useNativeControls
                        resizeMode='cover'
                        isLooping />
                    </>


                  ) :
                    (

                      <Image source={{ uri: getFileUri(file) }} resizeMode='cover' style={{ flex: 1 }} />

                    )
                }
                
                <Pressable style={styles.closeIcon} onPress={() => setFile(null)}>
                  <Icon name='delete' size={20} color='white' />
                </Pressable>
              </View>
            )

          }
          <View style={styles.media}>
            <Text style={styles.addImageText}>Add to your post</Text>
            <View style={styles.mediaIcons}>
              <TouchableOpacity onPress={() => onPick(true)}>
                <Icon name="image" size={30} color={theme.colors.dark} />
              </TouchableOpacity>
              <TouchableOpacity onPress={() => onPick(false)}>
                <Icon name="video" size={33} color={theme.colors.dark} />
              </TouchableOpacity>
            </View>
          </View>


        </ScrollView>
        <Button
          buttonStyle={{ height: hp(6.2), backgroundColor: theme.colors.primaryDark2 }}
          title={post && post.id? "Update":"Post"}
          loading={loading}
          hasShadow={false}
          onPress={onSubmit}
        />

      </View>

    </ScreenWrapper>
  )
}

export default NewPost

const styles = StyleSheet.create({
  container: {
    flex: 1,
    // backgroundColor: 'red',
    marginBottom: 30,
    paddingHorizontal: wp(4),
    gap: 15,
  },

  title: {
    // marginBottom: 10,
    fontSize: hp(2.5),
    fontWeight: theme.fonts.semibold,
    color: theme.colors.text,
    textAlign: 'center'
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },

  username: {
    fontSize: hp(2.2),
    fontWeight: theme.fonts.semibold,
    color: theme.colors.text,
  },

  avatar: {
    height: hp(6.5),
    width: hp(6.5),
    borderRadius: theme.radius.xl,
    borderCurve: 'continuous',
    borderWidth: 1,
    borderColor: 'rgba(0,0,0,0.1)'
  },

  publicText: {
    fontSize: hp(1.7),
    fontWeight: theme.fonts.medium,
    color: theme.colors.textLight,
  },
  textEditor: {
    // marginTop: 10,
    // backgroundColor:''
  },

  media: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderWidth: 1.5,
    padding: 12,
    paddingHorizontal: 18,
    borderRadius: theme.radius.xl,
    borderCurve: 'continuous',
    borderColor: theme.colors.gray
  },

  mediaIcons: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 19
  },

  addImageText: {
    fontSize: hp(1.9),
    fontWeight: theme.fonts.semibold,
    color: theme.colors.text,
  },
  imageIcon: {
    // backgroundColor: theme.colors.gray,
    // borderRadius: theme.radius.md,
    // padding: 6,
  },
  file: {
    height: hp(30),
    width: '100%',
    borderRadius: theme.radius.xl,
    overflow: 'hidden',
  },
  borderCurve: 'continuous',
  video: {
  },
  closeIcon: {
    position: 'absolute',
    top: 10,
    right: 10,
    backgroundColor: 'rgba(255,0,0,0.6)',
    padding: 7,
    borderRadius: 50,

    // shadowColor: theme.colors.textLight,
    // shadowOffset: {width: 0, height: 3},
    // shadowOpacity: 0.6,
    // shadowRadius: 8
  },
  
  editIcon: {
    position: 'absolute',
    top: 8,
    right: 10,
    backgroundColor: 'black',
    padding: 3,
    borderRadius: 50,

    // shadowColor: theme.colors.textLight,
    // shadowOffset: {width: 0, height: 3},
    // shadowOpacity: 0.6,
    // shadowRadius: 8
  }
})

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\app\main\notifications.jsx ---
import { StyleSheet, Text, View } from "react-native";
import React, { useEffect, useState } from "react";
import ScreenWrapper from "../../components/ScreenWrapper";
import { ScrollView } from "react-native";
import NotificationItem from "../../components/NotificationItem";
import { hp, wp } from "../../helpers/common";
import { fetchNotifications } from "../../services/notificationService";
import { theme } from "../../constants/theme";
import { useRouter } from "expo-router";
import { useAuth } from "../../context/AuthContext";
import Header from "../../components/Header";
import Loading from "../../components/Loading";

const Notifications = () => {
  const [notifications, setNotifications] = useState([]);
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    getNotifications();
  }, []);

  const getNotifications = async () => {
    setLoading(true);
    try {
      let res = await fetchNotifications(user.id);
      if (res.success) setNotifications(res.data);
    } catch (error) {
      console.error("Error fetching notifications:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <ScreenWrapper>
      <View style={styles.container}>
      <Header title="Notifications"/>
      {loading?(<Loading/>):(
        <ScrollView
          showsVerticalScrollIndicator={false}
          contentContainerStyle={styles.listStyle}
        >
          {notifications.map((item) => {
            return (
              <NotificationItem item={item} key={item?.id} router={router} />
            );
          })}
          {
            notifications.length==0 && (
              <Text style={styles.noData}>No Notifications yet</Text>
            )
          }
        </ScrollView>
        )}
      </View>
    </ScreenWrapper>
  );
};

export default Notifications;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: wp(4),
  },
  listStyle: {
    paddingVertical: 20,
    gap: 10,
  },
  noData: {
    fontSize: hp(1.8),
    fontWeight: theme.fonts.medium,
    color: theme.colors.text,
    textAlign: "center",
  },
});


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\app\main\postDetails.jsx ---
import {
  Alert,
  Keyboard,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";
import React, { useEffect, useRef, useState } from "react";
import { useLocalSearchParams, useRouter } from "expo-router";
import {
  createComment,
  fetchPostDetials,
  removeComment,
  removePost,
} from "../../services/postService";
import { hp, wp } from "../../helpers/common";
import { theme } from "../../constants/theme";
import { useAuth } from "../../context/AuthContext";
import Loading from "../../components/Loading";
import PostCard from "../../components/PostCard";
import Input from "../../components/Input";
import Icon from "../../assets/icons";
import CommentItem from "../../components/CommentItem";
import { supabase } from "../../lib/supabase";
import { getUserData } from "../../services/userService";
import NewPost from "./newpost";
import { create } from "react-test-renderer";
import { createNotification } from "../../services/notificationService";

const PostDetails = () => {
  const { postId ,commentId} = useLocalSearchParams();
  const { user } = useAuth();
  const router = useRouter();
  const [startLoading, setStartLoading] = useState(true); //initally its ture we make it faluse when we have successfully fetch the post detials
  const [loading, setLoading] = useState(false); // this loading form comment
  const inputRef = useRef(null); //for comment
  //reson to use (if we commented the we want to clear input box)

  const commentRef = useRef("");
  // need one more ref TO hold the comment value

  // useLocalsearchParams = hook by expo
  //  If your route includes query parameters
  //  like ?postId=123, the useLocalSearchParams hook allows you to access those parameters directly in your component.
  const [post, setPost] = useState(null);
  // realtime comments add
  const handleNewComment = async (payload) => {
    console.log("got new comment:", payload.new);
    if (payload.new) {
      let newComment = { ...payload.new };
      let res = await getUserData(newComment.userid);
      newComment.user = res.success ? res.data : {};
      setPost((prevPost) => {
        return {
          ...prevPost,
          comments: [newComment, ...prevPost.comments],
        };
      });
    }
  };

  useEffect(() =>  {
    let commentChannel = supabase
      .channel("comments")
      .on(
        "postgres_changes",
        {
          event: "INSERT",
          schema: "public",
          table: "comments",
          filter: `postid=eq.${postId}`,
        },
        handleNewComment
      )

      // postgres_changes is a special event in Supabase that listens for changes in a table (like inserts, updates, or deletes).
      // on(ye hone mein , ye call kar do )
      .subscribe();
    getPostDetials();
    //5:35:40 time to know more for video
    return () => {
      supabase.removeChannel(commentChannel);
      // return () => { supabase.removeChannel(postChannel); }: When the component is unmounted (e.g., the user navigates away from this page), this removes the real-time channel to stop listening to changes, preventing unnecessary memory usage or errors.
    };

    //Dependency Array []: Since the dependency array is empty, this hook runs only once when the component mounts.
  }, []);

  console.log("got post Id: ", postId); //just to check ki ?qury se jo postid aaraha tah vo sach mein aa raha ha ki ni
  const getPostDetials = async () => {
    // fetch post details here
    // ab api create karo detial fetch karne ke liye (fetchpostdetials in siede postservices.js)
    let res = await fetchPostDetials(postId);
    // console.log('got post Detials: ',res);
    if (res.success) setPost(res.data);

    // fetching done so now
    setStartLoading(false);
  };

  const onNewComment = async () => {
    Keyboard.dismiss();
    if (!commentRef.current) return null;
    let data = {
      userid: user?.id,
      postid: post?.id,
      text: commentRef.current,
    };
    // create comment & comment get created but it wont show realtime update we will do it later ( but for sure )
    setLoading(true);
    let res = await createComment(data);
    setLoading(false);
    if (res.success) {
      if(user.id  != post.userid)
      {
        // send notification
        let notify={
          senderid:user.id,
          receiverid:post.userid,
          title:"Commented on your post",
          // we do stringify because we are sending data in string format
          data:JSON.stringify({postId:post.id,commentId:res.data.id})
        }
        createNotification(notify);
      }
      // send notification to post for every one do it later
      inputRef?.current?.clear();
      commentRef.current = ""; //here ? ni lagega because we are setting value
    } else {
      Alert.alert("comment", res.msg);
    }
  };
  const onDeleteComment = async (comment) => {
    console.log("deleting comment : ", comment);
    let res = await removeComment(comment?.id);
    if (res.success) {
      setPost((prevPost) => {
        //setPost(prevPost => { /* Do something with prevPost */ });
        // this syntax means prevpost hold , current values in post a state variable ([post,setPost]=useState(null);) <--this

        let updatedPost = { ...prevPost };
        updatedPost.comments = updatedPost.comments.filter(
          (c) => c.id != comment.id
        );
        /* The condition here is: c.id != comment.id, meaning "keep all comments except the one with the same id as the comment being deleted." */
        return updatedPost;
      });
    } else {
      Alert.alert("comment", res.msg);
    }
  };

  if (startLoading) {
    return (
      <View style={styles.center}>
        <Loading />
      </View>
    );
  }
  
  const onDeletePost=async(item)=>{
    console.log("Delete post:",item);
    // post delete api call 
    let res = await removePost(post.id);//aur u can typer item.id both works dono ek hi chij bata rahe h 
    if(res.success)
    {
      router.back();
    }
    else{
      Alert.alert('Post: ',res.msg); 
    }
  }
  const onEditPost=async(item)=>{
    console.log("Edit post:",item);
    router.back();
      router.push({pathname:'./newpost',params:{...item}})
  }

  if (!post) {
    return (
      <View
        style={[
          styles.center,
          { justifyContent: "flex-start", marginTop: 100 },
        ]}
      >
        <Text
          style={{
            fontSize: 18,
            fontWeight: "bold",
            color: "black",
            textAlign: "center",
            lineHeight: 24,
            marginHorizontal: 20,
            textTransform: "uppercase",
            paddingVertical: 10,
            fontFamily: "Arial",
          }}
        >
          Uh-oh, This post had a little breakup💔 with the server!
        </Text>
      </View>
    );
  }
  return (
    <View style={styles.container}>
      <ScrollView
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.list}
        keyboardShouldPersistTaps="handled"
      >
        <PostCard
          item={{ ...post, comments: [{ count: post?.comments?.length }] }}
          currentUser={user}
          router={router}
          hasShadow={false}
          showMoreIcon={false}
          showDelete={true}
          onDelete={onDeletePost}
          onEdit={onEditPost}
          onVideoPlay={() => {}}
          currentlyPlayingPostId={() => {}}
        />
        {/* create comment input ui */}
        <View style={styles.inputContainer}>
          <Input
            inputRef={inputRef}
            placeholder="Type comment..."
            onChangeText={(value) => (commentRef.current = value)}
            placeholderTextColor={theme.colors.textLight}
            containerStyle={{
              flex: 1,
              height: hp(6.2),
              borderRadius: theme.radius.xl,
              paddingRight: hp(6),
            }}
          />
          {loading ? (
            <View style={styles.loading}>
              <Loading size="small" />
            </View>
          ) : (
            <TouchableOpacity style={styles.sendIcon} onPress={onNewComment}>
              <Icon name="send" color={theme.colors.primaryDark} />
            </TouchableOpacity>
          )}
        </View>
        {/* comment list */}
        <View style={{ marginVertical: 15, gap: 17 }}>
          {post?.comments?.map((comment) => (
            <CommentItem
              key={comment?.id?.toString()}
              item={comment}
              canDelete={user.id == comment.userid || user.id == post.userid}
              onDelete={onDeleteComment}
              highlight={commentId == comment.id}
            />
          ))}
          {post?.comments?.length == 0 && (
            <Text style={{ color: theme.colors.text, marginLeft: 5 }}>
              Be first to comment
            </Text>
          )}
        </View>
      </ScrollView>
    </View>
  );
};

export default PostDetails;

const styles = StyleSheet.create({
  // Styling for the "container" component
  container: {
    flex: 1, // Flex item takes up available space
    backgroundColor: "white", // Background color
    paddingVertical: wp(7), // Vertical padding in responsive units
  },

  // Styling for the "inputContainer" component
  inputContainer: {
    flexDirection: "row", // Arrange child elements in a row
    alignItems: "center", // Center items vertically
    gap: 10, // Space between child elements
  },

  // Styling for the "list" component
  list: {
    paddingHorizontal: wp(4), // Horizontal padding in responsive units
  },

  // Styling for the "sendIcon" component
  sendIcon: {
    position: "absolute", // Position the send icon inside the input
    right: hp(1.5), // Add padding to the right
    height: hp(4), // Adjust height of the icon
    width: hp(4), // Adjust width of the icon
    justifyContent: "center", // Center the icon vertically
    alignItems: "center", // Center the icon horizontally
  },

  // Styling for the "center" component
  center: {
    flex: 1, // Flex item takes up available space
    alignItems: "center", // Center items vertically
    justifyContent: "center", // Center items horizontally
  },

  // Styling for the "notFound" text
  notFound: {
    fontSize: hp(2.5), // Font size in responsive units
    color: theme.colors.text, // Text color
    fontWeight: theme.fonts.medium, // Font weight
  },

  // Styling for the "loading" component
  loading: {
    position: "absolute",
    right: 15,
    justifyContent: "center",
    alignItems: "center",
    height: hp(4),
    width: hp(4),
  },
});


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\app\main\profile.jsx ---
import { Alert, Pressable, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import React, { useState } from 'react';
import Header from '../../components/Header';
import { useRouter } from 'expo-router';
import { useAuth } from '../../context/AuthContext';
import ScreenWrapper from '../../components/ScreenWrapper';
import { hp, wp } from '../../helpers/common';
import Icon from '../../assets/icons';
import { theme } from '../../constants/theme';
import { supabase } from '../../lib/supabase';
import Avatar from '../../components/Avatar';
import { fetchPosts } from '../../services/postService';
import { FlatList } from 'react-native';
import PostCard from '../../components/PostCard';
import Loading from '../../components/Loading';

var limit = 0;
const Profile = () => {

    const [currentlyPlayingPostId, setCurrentlyPlayingPostId] = useState(null); // State to track currently playing video
      // Handle video play event (to stop other videos)
      const handleVideoPlay = (postId) => {
        // If the video is already playing, stop it
        if (currentlyPlayingPostId === postId) {
          setCurrentlyPlayingPostId(null); // Stop the video
        } else {
          setCurrentlyPlayingPostId(postId); // Play the selected video
        }
      };

  const { user, setAuth } = useAuth();
  const router = useRouter();

    /* Here, a state variable post is defined using useState. It will store the posts fetched from the database. Initially, it's an empty array because no data has been fetched yet. */
    const [posts, setPosts] = useState([]); //write now its an empty array it will hlep to fetch the post for home screen form supabase
    const [hasMore, setHasMore] = useState(true);// this has more is for if we scroll to end then apne ko kaise pata chalega aur post batach ha ki , kyu apna logic abhi tak tho bs fetch karta tha extra post irrespective of ki post aur ha ki ni tho ye fix karna h
  
      const getPosts = async () => {
        // call the api here mane supabase walla api .form()  . select wagera wall function nothing rocket science
    
        if (!hasMore) return null;
        limit = limit + 5; // we will increase limit every time we end to bottom
    
        console.log("fetching post: ", limit);
        let res = await fetchPosts(limit,user.id);
        // console.log('got Post result: ',res);
        if (res.success) {
          if (posts.length == res.data.length) setHasMore(false);
          // uper walla check kar rha ki aur post ha ki ni
          setPosts(res.data);
        }
      };

const onLogout = async () => {
  setAuth(null); // Clear the authentication state
  const { error } = await supabase.auth.signOut(); // Sign out from Supabase

  if (error) {
    Alert.alert('Sign out', "Error signing out!");
  } else {
    router.replace('welcome'); // Navigate to the login screen
  }
};

  const handleLogout = async () => {
    // Show confirm modal
    Alert.alert("Confirm", "Are you sure you want to log out?", [
      {
        text: "Cancel",
        onPress: () => console.log("modal cancelled"),
        style: "cancel"
      },
      {
        text: "Logout",
        onPress: () => onLogout(),
        style: "destructive",

      }
    ]);
  };

  return (
    <ScreenWrapper bg="white">
      <FlatList
      ListHeaderComponent={<UserHeader user={user} router={router} handleLogout={handleLogout} />}
      ListHeaderComponentStyle={{marginBottom: 30}}
       initialNumToRender={10}
       data={posts}
       showsVerticalScrollIndicator={false}
       contentContainerStyle={styles.listStyle}
       keyExtractor={(item) => item.id.toString()}
       renderItem={({ item }) => (
         <PostCard item={item} currentUser={user} router={router} currentlyPlayingPostId={currentlyPlayingPostId} onVideoPlay={handleVideoPlay}/>
       )}
       //! creating fucntion that  call get post when we rich end
       onEndReached={() => {
         console.log("got to the end");
         getPosts();
       }}
       onEndReachedThreshold={0}
       // that means jab last ke zero pixel mein pahuncho ge tho onendreached  hoga

       ListFooterComponent={
         hasMore ? (
           <View style={{ marginVertical: posts.length == 0 ? 100 : 30 }}>
             {/* 
            kyu ek jab  initally home page load hoga( ya 0 post hoga ) tho loading screen top mein dekhega ajeeb lagega 
            so we will do jab no post ho  es liye if posts zeor ha tho magin 200 warna 30  
            //! after this part now very imp important part
           now we do enable  realtime changes in supabase ( database > publication > initalaaly zero table seletect for realtime updation , now we select ( notification , post , and comment table to make it realtime))
           also at last i diabled truncating event ( check se uncheckd kiya isko ) kyu ki ye ni chahye kuch delete ni karna h apne ko 
        
            //! now we make channel wichi listen posts in posts table ( doin this code after this getpostos funciton line  )
            */}
             <Loading/>
           </View>
         ) : (
           <View style={{ marginVertical: 30 }}>
             <Text style={styles.noPosts}>No more posts</Text>
           </View>
         )
       }
     />

    </ScreenWrapper>
  );
};

const UserHeader = ({ user, router, handleLogout }) => {
  return (
    <View style={{ flex: 1, backgroundColor: 'white', paddingHorizontal: wp(4) }}>
      <View>
        <Header title="Profile" mb={30} />
        <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
          <Icon name='logout' color={theme.colors.rose} />

        </TouchableOpacity>



      </View>
      <View style={styles.container}>
        <View style={{ gap: 15 }}>
          {/* uper jo gap hota ha vo gap view ke childrends ke bich ki gap hoti ha 
              agar view ke ander 3 text ha 
              hello 
              this 
              is nikhil 
              //!Vtho gap between hello = this = is nikhil wala gap ha not ki uper wale view componet ke bich ki gap
               */}
          <View style={styles.avatarContainer}>
            <Avatar
              uri={user?.image}
              size={hp(12)}
              rounded={theme.radius.xxl * 1.4}
            />
            <Pressable style={styles.editIcon} onPress={() => router.push('./editProfile')}>
              <Icon name="edit" strokeWidth={2.5} size={20} />
            </Pressable>
            {/* user name  and address part  */}
          </View>
          <View style={{ alignItems: 'center', gap: 4 }}>
            <Text style={styles.userName}>{user && user.name || 'guest'}</Text>
            <Text style={styles.infoText}>{user && user.address || 'place'}</Text>
            {/* sonu
              jo extra or ke sath dala gaya condition h vo bs test ke liye hata dena vese bhi its not a good way to add like this 
              matlab dal sakte ho per optimize way mein yani  

              //!! <Text style={styles.userName}>{user?.name || 'guest'}</Text>

              */}

          </View>
          {/* Email,PHone,Bio */}
          <View style={{ gap: 10 }}>
            <View style={styles.info}>
              <Icon name="mail" size={20} color={theme.colors.textLight} />
              <Text style={styles.infoText}>{user && user.email}</Text>
            </View>

            {
              user && user.phoneNumber && (
                <View style={styles.info}>
                  <Icon name="call" size={20} color={theme.colors.textLight} />
                  <Text style={styles.infoText}>{user && user.phoneNumber}</Text>
                </View>)
            }
            {
              user && user.bio && (
                <Text style={styles.infoText}>{user.bio || 'User bio'}</Text>
              ) 

            }


          </View>
        </View>

      </View>
    </View>
  );
};

export default Profile;

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  
  headerContainer: {
    marginHorizontal: wp(4),
    marginBottom: 20,
  },
  
  headerShape: {
    width: wp(100),
    height: hp(20),
  },
  
  avatarContainer: {
    height: hp(12),
    width: hp(12),
    alignSelf: 'center',
  },
  editIcon: {
    position: 'absolute',
    bottom: 0,
    right: -12,
    padding: 7,
    borderRadius: 50,
    backgroundColor: 'white',
    shadowColor: theme.colors.textLight,
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.4,
    shadowRadius: 5,
    elevation: 7
  },
  
  userName: {
    fontSize: hp(3),
    fontWeight: '500',
    color: theme.colors.textDark
  },
  
  info: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10
  },
  infoText: {
    fontSize: hp(1.6),
    fontWeight: '500',
    color: theme.colors.textLight
  },
  
  logoutButton: {
    position: 'absolute',
    right: 0,
    padding: 5,
    borderRadius: theme.radius.sm,
    backgroundColor: '#e1fffc'
  },
  
  listStyle: {
    paddingHorizontal: wp(4),
    paddingBottom: 30,
  },
  
  noPosts: {
    fontSize: hp(2),
    textAlign: 'center',
    color: theme.colors.text
  }
});

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\components\Avatar.jsx ---
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import { hp } from '../helpers/common'
import { theme } from '../constants/theme'
import {Image} from 'expo-image';
import { getUserImageSrc } from '../services/imageService';




const Avatar = ({
    uri,
    size = hp(4.5),
    rounded = theme.radius.md,
    style = {}
}) => {
    return ( 
        <Image
            source={getUserImageSrc(uri)}
            transition={100}//100 milisec
            style={[styles.avatar, { height: size, width: size, borderRadius: rounded }, style]}
        />
    )
}

export default Avatar

const styles = StyleSheet.create({
    avatar:{
        borderCurve: "continuous",
        borderColor: theme.colors.darkLight,
        borderWidth: 1
    },
})
// import { StyleSheet, Text, View } from 'react-native'
// import React from 'react'

// const Avatar = () => {
//   return (
//     <View>
//       <Text>Avatar</Text>
//     </View>
//   )
// }

// export default Avatar

// const styles = StyleSheet.create({})

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\components\BackButton.jsx ---

import React from 'react'
import { Pressable, StyleSheet, View, Text } from 'react-native';
import Icon from '../assets/icons';
import { theme } from '../constants/theme';

const BackButton = ({ size = 26, router }) => {
    return (
        <Pressable onPress={() => router.back()} style={styles.button}>
            <Icon name="arrowLeft" strokeWidth={2.5} size={size} color={theme.colors.text} />
        </Pressable>
    );
};

export default BackButton
const styles = StyleSheet.create({
    button: {
        alignSelf: 'flex-start',
        padding: 5,
        marginTop: 2,
        borderRadius: theme.radius.sm,
        backgroundColor: '#e1fffc'
    }
})

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\components\Button.jsx ---
import { Pressable, StyleSheet, Text, View } from 'react-native'
import React from 'react'
import { theme } from '../constants/theme'
import { hp } from '../helpers/common'
import Loading from './Loading'


const Button = ({
  buttonStyle, // Style for the button container
  textStyle,   // Style for the button text
  title = '',  // Default title for the button
  onPress = () => { }, // Function to be called on button press
  hasShadow = true,   // Whether to display a shadow effect or not toggel karneke kam ayga 
  loading = false,    // Whether the button is currently loading
}) => {
  const shadowStyle = {
    shadowColor: theme.colors.dark,  // Color of the shadow
    shadowOffset: { width: 0, height: 10 }, // Offset of the shadow
    shadowOpacity: 0.2, // Opacity of the shadow
    shadowRadius: 8, // Blur radius of the shadow
    elevation: 4, // Elevation for Android shadow
  };
  if (loading) {
    return (
      <View style={[styles.button, buttonStyle, { backgroundColor: 'white' }]} >
        <Loading/>
      </View>
    )
  }
  return (

    <Pressable onPress={onPress} style={[styles.button, buttonStyle, hasShadow && shadowStyle]}>
      {/* 
    - **onPress={onPress}**: This prop defines the function that will be called when the button is pressed. 
      In this case, it's the `onPress` prop passed to the `Button` component. 
      This allows you to handle the button press event and perform actions like navigating to another screen, 
      submitting data, or triggering other events.

    - **style={[styles.button, buttonStyle, hasShadow && shadowStyle]}**: 
      This prop determines the styling of the button. It's an array that combines:
        - **styles.button**: Default styles defined within the `StyleSheet` (not shown in the snippet). 
          These likely provide basic styling like background color, border radius, etc.
        - **buttonStyle**: Custom styles passed to the component through the `buttonStyle` prop. 
          This allows for flexibility in customizing the button's appearance.
        - **hasShadow && shadowStyle**: This conditionally applies the `shadowStyle` if the `hasShadow` prop is true. 
          This enables or disables the shadow effect on the button.

    - **<Text style={[styles.text, textStyle]}>{title}</Text>**: 
      This renders the button's text. 
      - **style={[styles.text, textStyle]}**: Similar to the `style` prop above, this combines:
        - **styles.text**: Default text styles (likely for color, font size, etc.).
        - **textStyle**: Custom text styles passed through the `textStyle` prop.
      - **{title}**: The actual text content of the button, which is passed to the component through the `title` prop. 
  */}
      {/* here below title is passes by parent compponnet which is in welcome line  */}
      <Text style={[styles.text, textStyle]}>{title}</Text>

    </Pressable>
  )
}

export default Button

const styles = StyleSheet.create({

  button: {
    backgroundColor: theme.colors.primary,
    height: hp(6.6),
    justifyContent: 'center',
    alignItems: 'center',
    borderCurve: 'continuous',
    borderRadius: theme.radius.xl
  },

  text: {
    fontSize: hp(2.5),
    color: 'white',
    fontWeight: theme.fonts.bold
  },
})

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\components\CommentItem.jsx ---
import { Alert, StyleSheet, Text, TouchableOpacity, View } from "react-native";
import React from "react";
import { theme } from "../constants/theme";
import { hp, wp } from "../helpers/common";
import moment from "moment";
import Avatar from "./Avatar";
import Icon from "../assets/icons";

const  CommentItem = ({
  item,
  canDelete = false,
  onDelete = () => {
    // no such onDelete function is passed from parent then we use this empty onDelete okay
    // just to avoid errors , just to be in safe side
    // because im passing ondelte function from parent
  },
  highlight = false,
}) => {
  const createdAt = moment(item?.created_at).format("MMM d");
  const handelDelete = () => {
    Alert.alert("Confirm", "Are you sure you want to do this?", [
      console.log("item:", item),
      {
        text: "Cancel",
        onPress: () => console.log("modal cancelled"),
        style: "cancel",
      },
      {
        text: "Delete",
        onPress: () => onDelete(item),
        style: "destructive",
      },
    ]);
  };
  return (
    <View style={styles.container}>
      <Avatar uri={item?.user?.image} />

      <View style={[styles.content, highlight && styles.highlight]}>
        <View
          style={{
            flexDirection: "row",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          <View style={styles.nameContainer}>
            <Text style={styles.text}>{item?.user?.name}</Text>
            <Text>.</Text>
            <Text style={[styles.text, { color: theme.colors.textLight }]}>
              {createdAt}
            </Text>
          </View>
          {canDelete && (
            <TouchableOpacity onPress={handelDelete}>
              <Icon name="delete" size={20} color={theme.colors.rose} />
            </TouchableOpacity>
          )}
        </View>
        <Text style={[styles.text, { fontWeight: "normal" }]}>
          {item?.text}
        </Text>
      </View>
    </View>
  );
};

export default CommentItem;

const styles = StyleSheet.create({
  // Styling for the "container" component
  container: {
    flex: 1, // Flex item takes up available space
    flexDirection: "row", // Arrange child elements in a row
    gap: 7, // Space between child elements
  },

  // Styling for the "content" component
  content: {
    backgroundColor: "rgba(97, 233, 243, 0.09)", // Semi-transparent background color
    flex: 1, // Flex item takes up available space
    gap: 5, // Space between child elements
    paddingHorizontal: 14, // Horizontal padding
    paddingVertical: 10, // Vertical padding
    borderRadius: theme.radius.md, // Border radius
    borderCurve: "continuous", // Ensures a smooth border curve
  },

  // Styling for the "highlight" component
  highlight: {
    borderWidth: 0.2, // Border width
    backgroundColor: "white", // Background color
    borderColor: theme.colors.dark, // Border color
    shadowColor: theme.colors.dark, // Shadow color
    shadowOffset: { width: 0, height: 0 }, // Shadow offset
    shadowOpacity: 0.3, // Shadow opacity
    shadowRadius: 8, // Shadow radius
    elevation: 5, // Elevation for Android
  },

  // Styling for the "nameContainer" component
  nameContainer: {
    flexDirection: "row", // Arrange child elements in a row
    alignItems: "center", // Center items vertically
    gap: 3, // Space between child elements
  },

  // Styling for the "text" component
  text: {
    fontSize: hp(1.6), // Font size in responsive units
    fontWeight: theme.fonts.medium, // Font weight
    color: theme.colors.textDark, // Text color
  },
});


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\components\Header.jsx ---
// comman headear so that we can use in multiple screens where it needed
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import { useRoute } from '@react-navigation/native'
import { useRouter } from 'expo-router'
import BackButton from './BackButton'
import { hp } from '../helpers/common'
import { theme } from '../constants/theme'


// mb is margin bottom property 

const Header = ({title, showBackButton =true, mb=10}) => {
    const router = useRouter();
  return (
    <View style={[styles.container,{marginBottom:mb}]}>
      {
        showBackButton && (
            <View style = {styles.backButton}>
                <BackButton router={router}/>
            </View>
        )
      }
      {/* belwo is like tilte show karo if ni ha tho "" show karo  */}
      <Text style = {styles.title}>{title  || ""}</Text> 
    </View>
  )
}

export default Header


const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 5,
    gap: 10,
  },
  title: {
    fontSize: hp(2.9),
    fontWeight: theme.fonts.semibold,
    color: theme.colors.textDark,
  },
  backButton: {
    position: 'absolute',
    left: 0,
  },
});

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\components\Input.jsx ---
import { StyleSheet, Text, View, TextInput } from 'react-native'
import React from 'react'
import { theme } from '../constants/theme';
import { hp } from '../helpers/common';

const Input = (props) => {
    // Render a View component that acts as the container for the input.
    return (
      <View 
        // Combine the default container style with any custom styles provided.
        style={[styles.container, props.containerStyle && props.containerStyle]}>
        {/* Conditionally render an icon if the 'icon' prop is provided. */}
        {props.icon && props.icon} 
  
        <TextInput 
          // Make the TextInput occupy all available space within the container.
          style={{ flex: 1 }}
  
          // Set the placeholder text color using the theme.
          placeholderTextColor={theme.colors.textLight} 
  
          // Allow access to the underlying native TextInput component.
          ref={props.inputRef && props.inputRef} 
  
          // Pass any remaining props to the TextInput component.
          {...props} 
        />
      </View>
    );
  };

export default Input

const styles = StyleSheet.create({
    container: {
        // Arrange child elements in a row, horizontally.
        flexDirection: 'row',
      
        // Set the height of the container.
        height: hp(7.2), 
      
        // Vertically center the items within the container.
        alignItems: 'center',
      
        // Horizontally center the items within the container.
        justifyContent: 'center',
      
        // Add a border around the container.
        borderWidth: 0.4,
      
        // Set the border color using a value from the theme.
        borderColor: theme.colors.text,
      
        // Set the border radius using a value from the theme.
        borderRadius: theme.radius.xxl,
      
        // Control how borders are drawn for complex shapes.
        borderCurve: 'continuous', 
      
        // Add horizontal padding to the container.
        paddingHorizontal: 18,
      
        // Add space between child elements.
        gap: 12
      }
})

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\components\Loading.jsx ---
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import { theme } from '../constants/theme'
import { ActivityIndicator } from 'react-native'

const Loading = ({size ="large", color=theme.colors.primary}) => {
  return (
    <View style={{justifyContent:'center',alignItems:'center'}}> 
    <ActivityIndicator size={size} color={color}/>
      {/* <Text>Loading</Text> */}
    </View>
  )
}

export default Loading

const styles = StyleSheet.create({}) 

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\components\LoadingAnimated.jsx ---
import React, { useEffect, useRef } from 'react';
import { Animated, StyleSheet, View, Image } from 'react-native';

const LoadingAnimated = ({ size = 50, iconSource }) => {
  const spinValue = useRef(new Animated.Value(0)).current;

  // Spin animation
  useEffect(() => {
    const spinAnimation = Animated.loop(
      Animated.timing(spinValue, {
        toValue: 1,
        duration: 1000, // 1 second for a full rotationll
        useNativeDriver: true,
      })
    );
    spinAnimation.start();

    return () => spinAnimation.stop();
  }, [spinValue]);

  const spin = spinValue.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '360deg'], // Rotate from 0 to 360 degrees
  });

  return (
    <View style={styles.container}>
      <Animated.Image
        source={iconSource} // Your custom icon
        style={[
          styles.icon,
          {
            width: size,
            height: size,
            transform: [{ rotate: spin }], // Apply spin animation
          },
        ]}
        resizeMode="contain"
      />
    </View>
  );
};

export default LoadingAnimated;

const styles = StyleSheet.create({
  container: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  icon: {
    tintColor: '#3498db', // Optional: Adjust the color of the icon
  },
});


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\components\NotificationItem.jsx ---
import { StyleSheet, Text, TouchableOpacity, View } from "react-native";
import React, { useState } from "react";
import { hp } from "../helpers/common";
import { theme } from "../constants/theme";
import { handleUrlParams } from "expo-router/build/fork/getStateFromPath-forks";
import Avatar from "./Avatar";
import moment from "moment";

const NotificationItem = ({ item, router }) => {
    const [newComment, setNewComment] = useState(true); // Track if the comment is new
  const handleClick = () => {
    let {postId,commentId}=JSON.parse(item?.data);
    router.push({pathname:'./postDetails',params:{postId,commentId}});
    
    // open Post detials
    // red notification in new comment


    const handleClick = () => {
        setNewComment(false);  // Mark as read when clicked
        let { postId, commentId } = JSON.parse(item?.data);
        router.push({ pathname: './postDetails', params: { postId, commentId } });
        markAsRead(item.id); // Call function to update the read status in the parent
      };
  };

  const createdAt=moment(item?.created_at).format('MMM d');

  return (
    <TouchableOpacity style={styles.container} onPress={handleClick}>
    <Avatar uri={item?.sender?.image} size={hp(6)} />
    <View style={styles.nameTitle}>
      <Text style={styles.text}>{item?.sender?.name}</Text>
      <Text style={[styles.text, { color: theme.colors.textDark }]}>{item?.title}</Text>
    </View>
    <Text style={[styles.text, { color: theme.colors.textLight }]}>{createdAt}</Text>
    {newComment && (
      <View style={styles.redPill}></View> // Red pill for new comment
    )}
  </TouchableOpacity>
  );
};

export default NotificationItem;
const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    gap: 12,
    backgroundColor: "white",
    borderWidth: 0.5,
    borderColor: theme.colors.darkLight,
    padding: 15,
    // paddingVertikal: 12,
    borderRadius: theme.radius.xxl,
    borderCurve: "continuous",
  },
  nameTitle: {
    flex: 1,
    gap: 2,
  },
  text: {
    fontSize: hp(1.6),
    fontWeight: theme.fonts.medium,
    color: theme.colors.text,
  },
});


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\components\PostCard.jsx ---
import {
  Alert,
  Share,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";
import React, { useEffect, useState, useCallback, memo, useMemo } from "react";
import { hp, stripHtmlTags, wp } from "../helpers/common";
import { theme } from "../constants/theme";
import Avatar from "./Avatar";
import moment from "moment";
import Icon from "../assets/icons";
import RenderHTML from "react-native-render-html";
import { Image } from "expo-image";
import { downloadFile, getSupabaseFileUrl } from "../services/imageService";
import { Video } from "expo-av";
import { createPostLike, removePostLike } from "../services/postService";
import Loading from "./Loading";

// Static styles for HTML rendering to prevent unnecessary recalculations
const textStyle = {
  color: theme.colors.dark,
  fontSize: hp(1.75),
};

const tagsStyles = {
  div: textStyle,
  p: textStyle,
  ol: textStyle,
  h1: { color: theme.colors.dark },
  h4: { color: theme.colors.dark },
};

// Memoized component to prevent unnecessary re-renders
const PostCard = memo(
  ({
    item,
    currentUser,
    router,
    hasShadow = true,
    showMoreIcon = true,
    showDelete = false,
    onDelete = () => {},
    onEdit = () => {},
    currentlyPlayingPostId,
    onVideoPlay,
  }) => {
    // State for managing likes and loading states
    const [likes, setLikes] = useState([]);
    const [loading, setLoading] = useState(false);
    const [lastClick, setLastClick] = useState(0);

    // Derived states
    // video pause
    // const isPlaying = currentlyPlayingPostId === item.id;
    const createdAt = moment(item?.created_at).format("MMM D");
    const liked = useMemo(
      () => likes?.some((like) => like.userid === currentUser?.id),
      [likes, currentUser?.id]
    );

    // Double click detection constants
    const DOUBLE_CLICK_THRESHOLD = 300;

    // Sync likes with item updates
    useEffect(() => {
      setLikes(item?.postlike || []);
    }, [item?.postlike]); // Only update when postlike changes

    // Memoized video press handler
    const handleVideoPress = useCallback(() => {
      const currentTime = Date.now();
      
      // Single tap handling
      if (currentTime - lastClick > DOUBLE_CLICK_THRESHOLD) {
        // Toggle video play/pause
        setCurrentlyPlayingPostId(prev => prev === item.id ? null : item.id);
      }
      
      // Double tap handling
      if (currentTime - lastClick < DOUBLE_CLICK_THRESHOLD) {
        onLike();
      }
      
      setLastClick(currentTime);
    }, [lastClick, onLike, item.id]);
    
    // Optimized double click handler
    const handleDoubleClick = useCallback(() => {
      const currentTime = Date.now();
      if (currentTime - lastClick < DOUBLE_CLICK_THRESHOLD) {
        onLike();
      }
      setLastClick(currentTime);
    }, [lastClick, onLike]);

    // Memoized like handler with state optimization
    const onLike = useCallback(async () => {
      const updateLikes = liked
        ? likes.filter((like) => like.userid !== currentUser?.id)
        : [...likes, { userid: currentUser?.id, postid: item?.id }];

      setLikes(updateLikes);

      const apiCall = liked
        ? removePostLike(item?.id, currentUser?.id)
        : createPostLike({ userid: currentUser?.id, postid: item?.id });

      const res = await apiCall;
      if (!res.success) Alert.alert("Post", "Something went wrong!");
    }, [liked, likes, currentUser?.id, item?.id]);

    // Memoized share handler with file caching
    const onShare = useCallback(async () => {
      const content = { message: stripHtmlTags(item?.body) };

      if (item?.file) {
        setLoading(true);
        try {
          const url = await downloadFile(getSupabaseFileUrl(item?.file).uri);
          content.url = url;
        } catch (error) {
          Alert.alert("Error", "File download failed.");
        }
        setLoading(false);
      }

      Share.share(content);
    }, [item?.body, item?.file]);

    // Memoized delete confirmation dialog
    const handlePostDelete = useCallback(() => {
      Alert.alert("Confirm", "Are you sure you want to delete this post?", [
        { text: "Cancel", style: "cancel" },
        { text: "Delete", onPress: () => onDelete(item), style: "destructive" },
      ]);
    }, [item, onDelete]);

    // Memoized post details navigation
    const openPostDetails = useCallback(() => {
      if (showMoreIcon) {
        router.push({
          pathname: "./postDetails",
          params: { postId: item?.id },
        });
      }
    }, [showMoreIcon, item?.id, router]);

    // Memoized style calculations
    const containerStyle = useMemo(
      () => [styles.container, hasShadow && styles.glowingShadow],
      [hasShadow]
    );

    // Update the mediaStyle memoization
    const mediaStyle = useMemo(() => {
      const baseStyle = [styles.postMedia];
      if (item?.file?.includes("postVideos")) {
        return [...baseStyle, { height: hp(45) }];
      }
      else if (item?.file?.includes("postImages")) {
      return [...baseStyle, { height: hp(40) }];} // Explicit height for images
    }, [item?.file]);

    return (
      <View style={containerStyle}>
        {/* Header Section */}
        <View style={styles.header}>
          <View style={styles.userInfo}>
            <TouchableOpacity onPress={() => router.push({ pathname: "./profile", params: { userId: item?.user?.id } })}>

            <Avatar
              size={hp(4.5)}
              uri={item?.user?.image}
              rounded={theme.radius.md}
              />
              </TouchableOpacity>
            <View style={{ gap: 2 }}>
              <Text style={styles.username}>{item?.user?.name}</Text>
              <Text style={styles.postTime}>{createdAt}</Text>
            </View>
          </View>

          {showMoreIcon && (
            <TouchableOpacity onPress={openPostDetails}>
              <Icon
                name="threeDotsHorizontal"
                size={hp(4)}
                strokeWidth={4}
                color={theme.colors.textDark}
              />
            </TouchableOpacity>
          )}

          {showDelete && currentUser?.id === item?.userid && (
            <View style={styles.actions}>
              <TouchableOpacity onPress={() => onEdit(item)}>
                <Icon
                  name="edit"
                  size={hp(2.8)}
                  color={theme.colors.textDark}
                />
              </TouchableOpacity>
              <TouchableOpacity onPress={handlePostDelete}>
                <Icon name="delete" size={hp(2.8)} color={theme.colors.rose} />
              </TouchableOpacity>
            </View>
          )}
        </View>

        {/* Content Section */}
        <View style={styles.content}>
          {item?.body && (
            <View style={styles.postBody}>
              <RenderHTML
                contentWidth={wp(100)}
                source={{ html: item.body }}
                tagsStyles={tagsStyles}
              />
            </View>
          )}

          {item?.file && (
            <TouchableOpacity onPress={handleDoubleClick}
            activeOpacity={0.9}>
              {item.file.includes("postImages") ? (
                <Image
                  source={getSupabaseFileUrl(item.file)}
                  transition={100}
                  style={mediaStyle}
                  contentFit="cover"
                />
              ) : (
                <Video
                  style={mediaStyle}
                  source={getSupabaseFileUrl(item.file)}
                  resizeMode="cover"
                  isLooping
                  useNativeControls
                  shouldPlay={currentlyPlayingPostId === item.id}
                  // Add pause handler for better control
                  onPlaybackStatusUpdate={(status) => {
                    if (
                      !status.isPlaying &&
                      currentlyPlayingPostId === item.id
                    ) {
                      // setCurrentlyPlayingPostId(null);
                    }
                  }}
                />
              )}
            </TouchableOpacity>
          )}
        </View>

        {/* Footer Actions */}
        <View style={styles.footer}>
          <View style={styles.footerButton}>
            <TouchableOpacity onPress={onLike}>
              <Icon
                name="heart"
                size={24}
                fill={liked ? theme.colors.rose : "transparent"}
                color={liked ? theme.colors.rose : theme.colors.textLight}
              />
            </TouchableOpacity>
            <Text style={styles.count}>{likes?.length}</Text>
          </View>

          <View style={styles.footerButton}>
            <TouchableOpacity onPress={openPostDetails}>
              <Icon name="comment" size={24} color={theme.colors.textLight} />
            </TouchableOpacity>
            <Text style={styles.count}>{item?.comments[0]?.count || 0}</Text>
          </View>

          <View style={styles.footerButton}>
            {loading ? (
              <Loading size="small" />
            ) : (
              <TouchableOpacity onPress={onShare}>
                <Icon name="share" size={24} color={theme.colors.textLight} />
              </TouchableOpacity>
            )}
          </View>
        </View>
      </View>
    );
  },
  areEqual
);

// Custom comparison function for memoization
function areEqual(prevProps, nextProps) {
  return (
    prevProps.item.id === nextProps.item.id &&
    prevProps.item.body === nextProps.item.body &&
    prevProps.item.file === nextProps.item.file &&
    prevProps.item.postLikes?.length === nextProps.item.postLikes?.length &&
    prevProps.item.comments?.count === nextProps.item.comments?.count &&
    prevProps.currentUser?.id === nextProps.currentUser?.id &&
    prevProps.currentlyPlayingPostId === nextProps.currentlyPlayingPostId &&
    prevProps.onVideoPlay === nextProps.onVideoPlay
  );
}

const styles = StyleSheet.create({
  container: {
    gap: 10,
    marginBottom: 15,
    borderRadius: theme.radius.xxl * 1.1,
    padding: 10,
    paddingVertical: 12,
    backgroundColor: "white",
    borderWidth: 0.5,
    borderColor: theme.colors.gray,
  },
  glowingShadow: {
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.8,
    shadowRadius: 20,
    elevation: 5,
    shadowColor: "rgba(0, 255, 255, 0.8)",
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  userInfo: {
    flexDirection: "row",
    alignItems: "center",
    gap: 8,
  },
  username: {
    fontSize: hp(1.7),
    color: theme.colors.textDark,
    fontWeight: theme.fonts.medium,
  },
  postTime: {
    fontSize: hp(1.4),
    color: theme.colors.textLight,
    fontWeight: theme.fonts.medium,
  },
  content: {
    gap: 10,
  },
  postMedia: {
    width: "100%",
    borderRadius: theme.radius.xl,
    borderCurve: "continuous",
  },
  postBody: {
    marginLeft: 5,
  },
  footer: {
    flexDirection: "row",
    alignItems: "center",
    gap: 15,
  },
  footerButton: {
    marginLeft: 5,
    flexDirection: "row",
    alignItems: "center",
    gap: 4,
  },
  actions: {
    flexDirection: "row",
    alignItems: "center",
    gap: 18,
  },
  count: {
    color: theme.colors.text,
    fontSize: hp(1.8),
  },
});

export default PostCard;


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\components\RichTextEditor.jsx ---
import { StyleSheet, Text, TextComponent, View } from 'react-native'
import React from 'react'
import { actions, RichEditor, RichToolbar } from 'react-native-pell-rich-editor'
import { theme } from '../constants/theme'

const RichTextEditor =
    (
    {    editorRef,
        onChange}
    ) => {
        return (
            <View style={{ minHeight: 285 }}>
                <RichToolbar
                    actions={[
                        // actions.insertImage,
                        actions.setBold,
                        actions.setItalic,
                        actions.alignLeft,
                        actions.alignCenter,
                        actions.alignRight,
                        actions.insertBulletsList,
                        actions.insertOrderedList,
                        actions.insertLink,
                        actions.setStrikethrough,
                        actions.setUnderline,
                        actions.removeFormat,
                        // actions.insertVideo,
                        actions.checkboxList,
                        actions.undo,
                        actions.redo,
                        actions.heading1,//kyu dono ka icone ni ha tho aopan iconeMap se denge inke icone(iconeMap pell-rich-ediotr kar ha see doncumentation )
                        actions.heading4,//
                        actions.nothing//
                    ]}
                    iconMap={{
                        [actions.heading1]: ({ tintColor }) => <Text style={{ color: tintColor }}>H1</Text>,
                        [actions.heading4]: ({ tintColor }) => <Text style={{ color: tintColor }}>H4</Text>
                    }}
                    style={styles.richBar}
                    flatContainerStyle={styles.flatStyle}
                    // showing green color for active state like if bold or itallic is selected then showin it green
                    selectedIconTint={theme.colors.primaryDark}
                    editor={editorRef}
                    disabled={false} />
                <RichEditor
                    ref={editorRef}
                    containerStyle={styles.rich}
                    editorStyle={styles.contentStyle}
                    placeholder={'Write your creations'}
                    onChange={onChange} // will triger onchange funciton 
                />

            </View>
        )
    }

export default RichTextEditor

const styles = StyleSheet.create({
    richBar: {
        borderTopRightRadius: theme.radius.xl,
        borderTopLeftRadius: theme.radius.xl,
        backgroundColor: theme.colors.gray,
        
        
    },
    rich: {
        minHeight: 240,
        flex: 1,
        borderWidth: 1.5,
        borderTopWidth: 0,
        borderBottomLeftRadius: theme.radius.xl,
        borderBottomRightRadius: theme.radius.xl,
        borderColor: theme.colors.gray,
        padding: 5,
    },
    contentStyle: {
        color: theme.colors.textDark,
        placeholderColor: 'gray',

    },
    flatStyle:
    {
        paddingHorizontal: 8,
        gap: 3,//gap between Bold italic , jstify....
    }
})

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\components\ScreenWrapper.jsx ---
import { View, Text } from 'react-native'
import React from 'react'
import { useSafeAreaInsets } from 'react-native-safe-area-context'

const ScreenWrapper = ({children,bg}) => {
    const {top} = useSafeAreaInsets();
    const paddingTop = top>0? top+5: 30; 
  return (
    <View style={{flex: 1,paddingTop, backgroundColor: bg}}>
        { 
        children
        }
    </View>
  )
}

export default ScreenWrapper

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\components\test.jsx ---


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\constants\index.js ---
export const supabaseUrl = 'https://ktbvfpxzwcceqhjjlscz.supabase.co';    
export const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt0YnZmcHh6d2NjZXFoampsc2N6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQ4MjQ1MzgsImV4cCI6MjA1MDQwMDUzOH0.JDIeC8go6a_LuR1ucbS012hCILJZqIOys-hrn9W-wCk';
export const GoogleClientId = '436794015973-2mo0iluvu5lqonkg5uptde6s6natqm9r.apps.googleusercontent.com';    
export const webId = '436794015973-2mo0iluvu5lqonkg5uptde6s6natqm9r.apps.googleusercontent.com';    
export const AndroidId = '436794015973-ge8kijt1snbie5l1cde673d43iadsp5q.apps.googleusercontent.com';    


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\constants\theme.js ---
export const theme = {
    colors: {
      // primary: '#00C26F',
      // primaryDark: '#00AC62',
      primary: '#1cf9df',
      primaryDark: '#4dd8c8',
      primaryDark2:"#2fe0cc",
      dark: '#3E3E3E',
      darkLight: '#E1E1E1',
      gray: '#e3e3e3',
      text: '#494949',
      textLight: '#7C7C7C',
      textDark: '#1D1D1D',
      rose: '#ef4444',
      roseLight: '#f87171',
      loading:'#33b2ff',
      notification:'#ff0000',
    },
    fonts: {
      medium: '500',
      semibold: '600',
      bold: '700',
      extraBold: '800',
    },
    radius: {
      xs: 10,
      sm: 12,
      md: 14,
      lg: 16,
      xl: 18,
      xxl: 22,
    }
  };

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\context\AuthContext.js ---
import {createContext, useState,useContext } from "react";

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    // 1. State Management:
    //    - Create a state variable 'user' using useState hook. 
    //    - Initially, 'user' is set to null (no user is logged in).
    const [user, setUser] = useState(null);
  
    // 2. Function to update the user state with the entire authUser object.
    const setAuth = (authUser) => {
      setUser(authUser);
    };
      
    // 3. Function to update the user state with new data.
    //    - Use spread syntax to keep existing properties of 'user' while 
    //      overriding them with the provided 'userData'.
    const setUserData = (userData) => {
      setUser({ ...user, ...userData});
    };
  
    // 4. Render the AuthContext.Provider component.
    //    - Pass the 'user', 'setAuth', and 'setUserData' as values to child components.
    return (
      <AuthContext.Provider value={{ user, setAuth, setUserData }}>
        {children}
      </AuthContext.Provider>
    );
  };
  
  // 5. Create a custom hook to access the AuthContext.
  //    - Use useContext hook to get the values provided by AuthProvider.
  export const useAuth = () => useContext(AuthContext);

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\helpers\common.js ---
import { Dimensions } from "react-native";

const {width: deviceWidth, height: deviceHeight} = Dimensions.get('window');
// hp is heigth percentage
export const hp = percentage => {
    return (percentage * deviceHeight) / 100;
  };
export const wp = percentage => {
    return (percentage * deviceWidth) / 100;
  };

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\lib\supabase.js ---
// for implementing authentication by supabase

import { AppState } from 'react-native'
import 'react-native-url-polyfill/auto'
import AsyncStorage from '@react-native-async-storage/async-storage'
import { createClient } from '@supabase/supabase-js'
import { supabaseAnonKey, supabaseUrl } from '../constants'



export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
})

// Tells Supabase Auth to continuously refresh the session automatically
// if the app is in the foreground. When this is added, you will continue
// to receive `onAuthStateChange` events with the `TOKEN_REFRESHED` or
// `SIGNED_OUT` event if the user's session is terminated. This should
// only be registered once.
//! below code is just to autorefresh for tokens  
AppState.addEventListener('change', (state) => {
  if (state === 'active') {
    supabase.auth.startAutoRefresh()
  } else {
    supabase.auth.stopAutoRefresh()
  }
})

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\services\imageService.js ---
import * as FileSystem from 'expo-file-system'
import { supabase } from '../lib/supabase';
import { decode } from 'base64-arraybuffer';
import { supabaseUrl } from '../constants';


export const getUserImageSrc = imagePath => {  // note that imagePath is parameter here we passing to function

    if (imagePath) {
        return getSupabaseFileUrl(imagePath);
    } else {
        return require('../assets/images/defaultUser2.jpeg');
    }
}

export  const getSupabaseFileUrl= filePath =>{
    if(filePath)
    {
        // we have to do this 👇
        // return {uri: `https://ktbvfpxzwcceqhjjlscz.supabase.co/storage/v1/object/public/uploads/${filePath}`}
        // per kyu ki "https://ktbvfpxzwcceqhjjlscz.supabase.co" part is same as we save in supabaseUrl in constant so we jsut replace it 


        return {uri: `${supabaseUrl}/storage/v1/object/public/uploads/${filePath}`}

    }
    return null;
}

export const downloadFile = async (url)=>
    {
        try {
            const {uri} = await FileSystem.downloadAsync(url,getLocalFilePath(url)) 
            // local getLocalFIlePath give path where be downloaded file is going to save
            // FileSystem is module of expo-file-system to download file 
            // downloadAsync returns a promise, and once the file is downloaded, it provides the file's local URI (local path on the device).
            // u can say u are usein downlaodAsync module form fileSystem ( url , path to sotre the downloaded file)
            
            return uri;
        } catch (error) {
            return null;
        }
    }

    
export const uploadFile = async (folderName, fileUri, isImage = true) => {
    try {
        let fileName = getFilePath(folderName, isImage);//! generating filename 
        const fileBase64 = await FileSystem.readAsStringAsync(fileUri, {
            /* await keyword is used with asynchronous functions. It tells JavaScript to pause execution at that point in the code until the Promise is resolved (either fulfilled or rejected). */
            encoding: FileSystem.EncodingType.Base64// we have base64 data 
        })
        // converting base64 into arraybuffer by decoding 
        let imageData = decode(fileBase64);//give us arraybuffer of that file
        let { data, error } = await supabase
            .storage
            .from('uploads')//Refers to the storage bucket named 'uploads   ' in Supabase.
            .upload(fileName, imageData,
                // filename(jo fileName: The name of the file in the storage.
                //imageData: The actual file content to be uploaded.)
                {
                    cacheControl: '3600',
                    // Sets how long (in seconds) the file can be cached by browsers or CDNs. Here, it's cached for 3600 seconds (1 hour
                    upsert: false,// Prevents overwriting if a file with the same name already exists in the bucket.
                    contentType: isImage ? 'image/*' : 'video/*'
                    // /* mane upload of multiple formate, subtypes (image/* = image/jpeg , image/png....)
                });
        if (error) {

            console.log('file upload error: ', error);
            return { success: false, msg: 'Could not upload media' };
        }
        return {success:true,data:data.path}//supabase mein that data ka ek path property hota ha vo apan return lenge
        /* 
        any doubt about data.path juar check
        https://supabase.com/docs/reference/javascript/storage-from-upload  under response*/


    }
    catch (error) {
        console.log('file upload error: ', error);
        return { success: false, msg: 'Could not upload media' };
    }
}



export const getLocalFilePath = filePath=>{
    let fileName = filePath.split('/').pop(); 
    // url ko thod dega jahan jahan (/ ayage) then pop() is liye taki last split mil jay like(https://home/file/image.png) = image.png

    return `${FileSystem.documentDirectory}${fileName}`;
    // fileSystem.documentDirecotry = is already predifide pathe  (/data/data/com.yourappname/files/.) iykyk 
}

export const getFilePath = (folderName, isImage) => {
    return `${folderName}/${(new Date()).getTime()}${isImage ? '.png' : '.mp4'}`

    //! String Interpolation `` : It allows you to insert variables or expressions directly inside a string without needing to concatenate them with +.
    //its will return below if we adding anything inside profiles folder 
    //profiles/576765457.png
    //its will return below if we adding anything inside images folder 
    //images/576765454.png
}




// ! supabase uploadin files in folder ( for react native)
/* 1. Base64
What is it?
Base64 is a way to encode binary data (like images or files) into text, using a set of 64 different characters. It turns binary data into a string that can be easily transferred over text-based protocols like HTTP.

Why use it?
It’s helpful for sending files over networks, such as uploading an image or document. However, the downside is that the file becomes larger (around 33% larger than the original).

2. decode() Function
What is it?
The decode() function is used to convert a Base64-encoded string back into its original binary format (which is called an ArrayBuffer in JavaScript). This is necessary for uploading the file as actual data.

Why use it?
We need the original binary data (as an ArrayBuffer) to send it to a server, like Supabase, because the server expects the raw data (not just a Base64 string).

3. ArrayBuffer
What is it?
An ArrayBuffer is a data type in JavaScript used to represent a fixed-length sequence of binary data. It's a way of storing raw binary data like images, audio files, etc.

Why use it?
When uploading files, especially images or videos, the server needs to handle the data in binary form (not text). ArrayBuffer is the format that lets you store and send that binary data.

4. .upload() Method
What is it?
.upload() is a function from Supabase’s storage system. It allows you to upload files to a specific "bucket" (a place to store files). This method needs the file data, the bucket name, and the path (where the file will be saved).

Why use it?
It’s the method that actually sends the data (in this case, the ArrayBuffer) to Supabase’s storage and stores it under a specified path, like avatars/avatar.png.

5. Content Type (contentType)
What is it?
The contentType is a header used to tell the server what kind of file you're uploading. For example, if you're uploading a PNG image, the content type is image/png.

Why use it?
The server needs to know what type of file it’s receiving (image, video, text, etc.), so it can handle it correctly. It helps to process the file properly when it's received.

Simple Example
Imagine you have an image you want to upload:

The image is encoded into Base64 so it can be sent as text over the internet.
You then decode the Base64 string back to its original form (binary data) using decode().
This binary data is then stored in an ArrayBuffer, which is like a container for raw binary data.
You use .upload() to send this binary data to Supabase’s storage.
You also specify that the file is an image with the content type (image/png), so the server knows how to handle it.
Why is this important?
Base64: Makes it easy to transfer files as text.
decode(): Converts Base64 back to a file.
ArrayBuffer: Stores the actual file data in a binary format.
.upload(): Sends the file to Supabase.
Content Type: Informs the server what type of file you're sending, ensuring it's processed correctly.













 */

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\services\notificationService.js ---
import { supabase } from "../lib/supabase";

export const createNotification = async (notification) => {
  // this function recive postLike a object
  // console.log('Received postLike:', postLike); //check postLike ke ander dono present h ki ni ( postId,userid )
  try {
    const { data, error } = await supabase
      //fuck just because of await  my code dindt works sucess true but data is undefiend cause i its dint wait for promise to accept or reject and rest of lines just runs like syncronoun
      .from("notifications")
      .insert(notification)
      .select()
      .single();

    if (error) {
      console.log("Notification error", error);
      return { success: false, msg: "Could not Notified!" };
    }
    return { success: true, data: data };
  } catch (error) {
    console.log("Notification error", error);
    return { success: false, msg: "Could not Notified!" };
  }
};


// api to fetch all the notifications 
export const fetchNotifications = async (receiverId) => {
    try {
      const { data, error } = await supabase
        .from("notifications")
        .select(
          ` 
                  *,
                 sender:senderid(id,name,image)
              `
        )
        // ! and remember that never ever give comman in last like of selected items in .select(``)
        .eq("receiverid", receiverId) // vo notification fetch karo jiske id = (reciverid = we passed)
        .order("created_at", { ascending: false})
  
      if (error) {
        console.log("fetchPostNotification error", error);
        return { success: false, msg: "Could not fetch the Notification" };
      }
      return { success: true, data: data };
    } catch (error) {
      console.log("fetchPostNotification error", error);
      return { success: false, msg: "Could not fetch the Notification" }; 
    }
  };


  
  // export const removeNotification = async (notificationId) => {
  //   // this function recive postLike a object
  //   try {
  //     const { error } = await supabase
  //       .from("notifications")
  //       .delete()
  //       .eq("id", notificationId) // supabase mein post table mein userId coloum ka naam mein i small ha is liye (userid likha here)
        
  
  //     if (error) {
  //       console.log("Notification Remove error", error);
  //       return { success: false, msg: "Could not remove the Notifications" };
  //     }
  //     return { success: true };
  //   } catch (error) {
  //     console.log("Notification Remove error", error);
  //     return { success: false, msg: "Could not remove the Notifications" };
  //   }
  // };

--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\services\postService.js ---
import { supabase } from "../lib/supabase";
import { uploadFile } from "./imageService";

export const createOrUpdatePost = async (post) => {
  try {
    // upload
    if (post.file && typeof post.file == "object") {
      //agar file h and vo object type ka h ya ni ki pakka gellary se liya gyaha and hame isse
      let isImage = post?.file?.type == "image";
      let folderName = isImage ? "postImages" : "postVideos"; // taki supabase mein pata chale image and video ko postimage and postvideo wale file mein dalan ah
      let fileResult = await uploadFile(folderName, post?.file?.uri, isImage);
      if (fileResult.success)
        post.file =
          fileResult.data; // agar success true  yani file uploaded post.file mein uploaded data ka path dedo ig mere hisab se
      else {
        return fileResult; // it will show media was not uplaoded  kyu ki uplodfile banaya hi essa gya ha
      }
    }

    const { data, error } = await supabase
      .from("posts") //which table
      .upsert(post)
      /* This is a combination of insert (add new data) and update (modify existing data).
            It checks if the post already exists in the table based on its primary key.
            If it exists, it updates the record.
            If it doesn’t exist, it inserts a new record. */
      .select() /* After performing the upsert, it retrieves the record so you can see what data was saved or updated in the table. */
      .single(); /* Ensures that the result returned is a single object (not an array). This is used when you're only dealing with one record at a time. */

    if (error) {
      console.log("create post error : ", error);
      return { success: false, msg: "Could not creat your post" };
    } else {
      return { success: true, data: data };
    }
  } catch (error) {
    console.log("create post erro", error);
    return { success: false, msg: "Could not creat your post" };
  }
};

export const fetchPosts = async (limit = 10, userId) => {
  try {
    if (userId) {
      const { data, error } = await supabase
        .from("posts")
        .select(
          ` 
            *,
            user:users(id, name, image),
            postlike (*),
            comments(count)
        `
        ) // notice here we are using backticks
        // ! and remember that never ever give comman in last like of selected items in .select(``)
        // postlike is liye fetch kiya ja raha ha taki jin user ne jisko like kiya h usko show bhi karna padega na
        .order("created_at", { ascending: false })
        .eq("userid", userId)
        .limit(limit);
        if (error) {
            console.log("fetch post erro", error);
            return { success: false, msg: "Could not fetch the post" };
          }
          return { success: true, data: data };

    } else {
      const { data, error } = await supabase
        .from("posts")
        .select(
          ` 
            *,
            user:users(id, name, image),
            postlike (*),
            comments(count)
        `
        ) // notice here we are using backticks
        // ! and remember that never ever give comman in last like of selected items in .select(``)
        // postlike is liye fetch kiya ja raha ha taki jin user ne jisko like kiya h usko show bhi karna padega na
        .order("created_at", { ascending: false })
        .limit(limit);
        if (error) {
          console.log("fetch post erro", error);
          return { success: false, msg: "Could not fetch the post" };
        }
        return { success: true, data: data };
    }


  } catch (error) {
    console.log("fetch post erro", error);
    return { success: false, msg: "Could not fetch the post" };
  }
};

export const fetchPostDetials = async (postId) => {
  try {
    const { data, error } = await supabase
      .from("posts")
      .select(
        ` 
                *,
                user:users(id, name, image),
                postlike (*),
                comments(*,  user: users(id,image,name))
            `
      )
      // notice here we are using backticks
      // ! and remember that never ever give comman in last like of selected items in .select(``)
      // postlike is liye fetch kiya ja raha ha taki jin user ne jisko like kiya h usko show bhi karna padega na
      .eq("id", postId) // vo post fetch karo jiske id = (postId = we passed)
      .order("created_at", { ascending: false, foreignTable: "comments" })
      .single();

    if (error) {
      console.log("fetchPostDetials error", error);
      return { success: false, msg: "Could not fetch the postDetials" };
    }
    return { success: true, data: data };
  } catch (error) {
    console.log("fetchPostDetials erro", error);
    return { success: false, msg: "Could not fetch the postDetials" };
  }
};

export const createPostLike = async (postLike) => {
  // this function recive postLike a object
  // console.log('Received postLike:', postLike); //check postLike ke ander dono present h ki ni ( postId,userid )
  try {
    const { data, error } = await supabase
      //fuck just because of await  my code dindt works sucess true but data is undefiend cause i its dint wait for promise to accept or reject and rest of lines just runs like syncronoun
      .from("postlike")
      .insert(postLike)
      .select()
      .single();

    if (error) {
      console.log("PostLike error", error);
      return { success: false, msg: "Could like the post" };
    }
    return { success: true, data: data };
  } catch (error) {
    console.log("PostLike error", error);
    return { success: false, msg: "Could like the post" };
  }
};

export const removePostLike = async (postId, userId) => {
  // this function recive postLike a object
  try {
    const { error } = await supabase
      .from("postlike")
      .delete()
      .eq("userid", userId) // supabase mein post table mein userId coloum ka naam mein i small ha is liye (userid likha here)
      .eq("postid", postId);

    if (error) {
      console.log("PostLike error", error);
      return { success: false, msg: "Could not remove the post " };
    }
    return { success: true };
  } catch (error) {
    console.log("PostLike error", error);
    return { success: false, msg: "Could not remove the post " };
  }
};
export const removeComment = async (commentId) => {
  // this function recive postLike a object
  try {
    const { error } = await supabase
      .from("comments")
      .delete()
      .eq("id", commentId);

    if (error) {
      console.log("remove comment error", error);
      return { success: false, msg: "Could not remove the comment " };
    }
    return { success: true, data: { commentId } };
  } catch (error) {
    console.log("PostLikeremove comment error", error);
    return { success: false, msg: "Could not remove the comment " };
  }
};
export const removePost = async (postId) => {
  // this function recive postLike a object
  try {
    const { error } = await supabase.from("posts").delete().eq("id", postId);

    if (error) {
      console.log("remove Post error", error);
      return { success: false, msg: "Could not remove the post " };
    }
    return { success: true, data: { postId } };
  } catch (error) {
    console.log("Post remove error", error);
    return { success: false, msg: "Could not remove the post " };
  }
};

export const createComment = async (comment) => {
  try {
    const { data, error } = await supabase
      .from("comments")
      .insert(comment)
      .select()
      .single();
    console.log("Comment Data:", data);
    if (error) {
      console.log("Comment error", error);
      return { success: false, msg: "Could not create comment" };
    }
    return { success: true, data: data };
  } catch (error) {
    console.log("Comment error", error);
    return { success: false, msg: "Could not create comment" };
  }
};


--- D:\one drive\OneDrive\Desktop\sash-app\backup_sash\SASH-app\services\userService.js ---
import { supabase } from "../lib/supabase";

export const getUserData = async(userId)=>{
    try{
        // all api supabase api  (to fetch tha user table's data from supabase )
        // supabase.com/docs/reference/javascript/select
        // go to and can learn how easy it is , to extract data  from table 

        const {data,error} =await supabase
        .from('users')
        .select()
        .eq('id',userId)
        .single();
        if(error)
        {
            return{success:false,msg:error?.message};
        }
        return{success:true,data};
        // we are selecting users table,we select data,then checking wahi wali user jiske id userId ho , then extractign single item

        
        
    }
    catch(error){
        // aggar erorr mila tho show kardo , and return kar do success ko false , and msg mein error msg 
        console.log('got error:',error);
        return{success: false, msg: error.message};

    }
}

export const updateUser = async(userId,data)=>{
    try{
        // all api supabase api  (to fetch tha user table's data from supabase )
        // supabase.com/docs/reference/javascript/select
        // go to and can learn how easy it is , to extract data  from table 

        const {error} =await supabase//error pass karega 
        //! abe ek bar pls video me ja ke ye dekh lo 2:37:16
        .from('users')//selecting table 
        .update(data)//what we r doin updating but data which we passed above ye (updateUser = async(userId,data)=>)
        .eq('id',userId);
        //update data where id is perticular user id

        if(error)
        {
            return{success:false,msg:error?.message};
        }
        return{success:true,data};
        // we are selecting users table,we select data,then checking wahi wali user jiske id userId ho , then extractign single item
    }
    catch(error){
        // aggar erorr mila tho show kardo , and return kar do success ko false , and msg mein error msg 
        console.log('got error:',error);
        return{success: false, msg: error.message};

    }
}